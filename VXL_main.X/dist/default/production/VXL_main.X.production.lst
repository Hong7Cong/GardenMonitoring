

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed Apr 18 16:52:56 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    16                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    17                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    18                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    19                           	psect	text10,local,class=CODE,merge=1,delta=2
    20                           	psect	text11,local,class=CODE,merge=1,delta=2
    21                           	psect	text12,local,class=CODE,merge=1,delta=2
    22                           	psect	text13,local,class=CODE,merge=1,delta=2
    23                           	psect	text14,local,class=CODE,merge=1,delta=2
    24                           	psect	text15,local,class=CODE,merge=1,delta=2
    25                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text19,local,class=CODE,merge=1,delta=2
    29                           	dabs	1,0x7E,2
    30  0000                     
    31                           ; Version 1.45
    32                           ; Generated 16/11/2017 GMT
    33                           ; 
    34                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    35                           ; All rights reserved.
    36                           ; 
    37                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    38                           ; 
    39                           ; Redistribution and use in source and binary forms, with or without modification, are
    40                           ; permitted provided that the following conditions are met:
    41                           ; 
    42                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    43                           ;        conditions and the following disclaimer.
    44                           ; 
    45                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    46                           ;        of conditions and the following disclaimer in the documentation and/or other
    47                           ;        materials provided with the distribution.
    48                           ; 
    49                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    50                           ;        software without specific prior written permission.
    51                           ; 
    52                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    53                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    54                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    55                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    56                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    57                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    58                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    59                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    60                           ; 
    61                           ; 
    62                           ; Code-generator required, PIC16F877A Definitions
    63                           ; 
    64                           ; SFR Addresses
    65  0000                     	;# 
    66  0001                     	;# 
    67  0002                     	;# 
    68  0003                     	;# 
    69  0004                     	;# 
    70  0005                     	;# 
    71  0006                     	;# 
    72  0007                     	;# 
    73  0008                     	;# 
    74  0009                     	;# 
    75  000A                     	;# 
    76  000B                     	;# 
    77  000C                     	;# 
    78  000D                     	;# 
    79  000E                     	;# 
    80  000E                     	;# 
    81  000F                     	;# 
    82  0010                     	;# 
    83  0011                     	;# 
    84  0012                     	;# 
    85  0013                     	;# 
    86  0014                     	;# 
    87  0015                     	;# 
    88  0015                     	;# 
    89  0016                     	;# 
    90  0017                     	;# 
    91  0018                     	;# 
    92  0019                     	;# 
    93  001A                     	;# 
    94  001B                     	;# 
    95  001B                     	;# 
    96  001C                     	;# 
    97  001D                     	;# 
    98  001E                     	;# 
    99  001F                     	;# 
   100  0081                     	;# 
   101  0085                     	;# 
   102  0086                     	;# 
   103  0087                     	;# 
   104  0088                     	;# 
   105  0089                     	;# 
   106  008C                     	;# 
   107  008D                     	;# 
   108  008E                     	;# 
   109  0091                     	;# 
   110  0092                     	;# 
   111  0093                     	;# 
   112  0094                     	;# 
   113  0098                     	;# 
   114  0099                     	;# 
   115  009C                     	;# 
   116  009D                     	;# 
   117  009E                     	;# 
   118  009F                     	;# 
   119  010C                     	;# 
   120  010D                     	;# 
   121  010E                     	;# 
   122  010F                     	;# 
   123  018C                     	;# 
   124  018D                     	;# 
   125  0019                     _TXREG	set	25
   126  0008                     _PORTDbits	set	8
   127  0006                     _PORTB	set	6
   128  001F                     _ADCON0bits	set	31
   129  0015                     _CCPR1L	set	21
   130  0012                     _T2CONbits	set	18
   131  0017                     _CCP1CONbits	set	23
   132  0065                     _RCIF	set	101
   133  00C4                     _CREN	set	196
   134  00C7                     _SPEN	set	199
   135  0099                     _SPBRG	set	153
   136  009E                     _ADRESL	set	158
   137  009F                     _ADCON1bits	set	159
   138  0086                     _TRISB	set	134
   139  0085                     _TRISA	set	133
   140  0092                     _PR2	set	146
   141  04C1                     _TRMT	set	1217
   142  043E                     _TRISC6	set	1086
   143  043F                     _TRISC7	set	1087
   144  04C5                     _TXEN	set	1221
   145  04C4                     _SYNC	set	1220
   146  04C2                     _BRGH	set	1218
   147  0447                     _TRISD7	set	1095
   148  0446                     _TRISD6	set	1094
   149  0445                     _TRISD5	set	1093
   150  0444                     _TRISD4	set	1092
   151  0443                     _TRISD3	set	1091
   152  0442                     _TRISD2	set	1090
   153  0441                     _TRISD1	set	1089
   154  0440                     _TRISD0	set	1088
   155  043A                     _TRISC2	set	1082
   156                           
   157                           	psect	strings
   158  0800                     __pstrings:	
   159  0800                     stringtab:	
   160  0800                     __stringtab:	
   161  0800                     stringcode:	
   162                           ;	String table - string pointers are 1 byte each
   163                           
   164  0800                     stringdir:	
   165  0800  3008               	movlw	high stringdir
   166  0801  008A               	movwf	10
   167  0802  0804               	movf	4,w
   168  0803  0A84               	incf	4,f
   169  0804  0782               	addwf	2,f
   170  0805                     __stringbase:	
   171  0805  3400               	retlw	0
   172  0806                     __end_of__stringtab:	
   173  0806                     STR_1:	
   174  0806  344E               	retlw	78	;'N'
   175  0807  3468               	retlw	104	;'h'
   176  0808  3469               	retlw	105	;'i'
   177  0809  3465               	retlw	101	;'e'
   178  080A  3474               	retlw	116	;'t'
   179  080B  3420               	retlw	32	;' '
   180  080C  3464               	retlw	100	;'d'
   181  080D  346F               	retlw	111	;'o'
   182  080E  343A               	retlw	58	;':'
   183  080F  3420               	retlw	32	;' '
   184  0810  3400               	retlw	0
   185  0811                     STR_2:	
   186  0811  3454               	retlw	84	;'T'
   187  0812  346F               	retlw	111	;'o'
   188  0813  3463               	retlw	99	;'c'
   189  0814  3420               	retlw	32	;' '
   190  0815  3464               	retlw	100	;'d'
   191  0816  346F               	retlw	111	;'o'
   192  0817  343A               	retlw	58	;':'
   193  0818  3420               	retlw	32	;' '
   194  0819  3400               	retlw	0
   195                           
   196                           ; #config settings
   197  0000                     
   198                           	psect	cinit
   199  07F2                     start_initialization:	
   200  07F2                     __initialization:	
   201                           
   202                           ; Clear objects allocated to BANK0
   203  07F2  1283               	bcf	3,5	;RP0=0, select bank0
   204  07F3  1303               	bcf	3,6	;RP1=0, select bank0
   205  07F4  01E2               	clrf	__pbssBANK0& (0+127)
   206  07F5  01E3               	clrf	(__pbssBANK0+1)& (0+127)
   207  07F6  01E4               	clrf	(__pbssBANK0+2)& (0+127)
   208  07F7  01E5               	clrf	(__pbssBANK0+3)& (0+127)
   209  07F8  01E6               	clrf	(__pbssBANK0+4)& (0+127)
   210  07F9  01E7               	clrf	(__pbssBANK0+5)& (0+127)
   211  07FA  01E8               	clrf	(__pbssBANK0+6)& (0+127)
   212  07FB  01E9               	clrf	(__pbssBANK0+7)& (0+127)
   213  07FC                     end_of_initialization:	
   214                           ;End of C runtime variable initialization code
   215                           
   216  07FC                     __end_of__initialization:	
   217  07FC  0183               	clrf	3
   218  07FD  120A  118A  2ED4   	ljmp	_main	;jump to C main() function
   219                           
   220                           	psect	bssBANK0
   221  0062                     __pbssBANK0:	
   222  0062                     _PWM_duty:	
   223  0062                     	ds	2
   224  0064                     _PWM_period:	
   225  0064                     	ds	2
   226  0066                     _temp:	
   227  0066                     	ds	2
   228  0068                     _tocdo:	
   229  0068                     	ds	2
   230                           
   231                           	psect	cstackCOMMON
   232  0070                     __pcstackCOMMON:	
   233  0070                     ?_PWM_Initalize:	
   234  0070                     ??_PWM_Initalize:	
   235                           ; 1 bytes @ 0x0
   236                           
   237  0070                     ?_ADCinit:	
   238                           ; 1 bytes @ 0x0
   239                           
   240  0070                     ??_ADCinit:	
   241                           ; 1 bytes @ 0x0
   242                           
   243  0070                     ?_hienthiled:	
   244                           ; 1 bytes @ 0x0
   245                           
   246  0070                     ?_UART_Write:	
   247                           ; 1 bytes @ 0x0
   248                           
   249  0070                     ??_UART_Write:	
   250                           ; 1 bytes @ 0x0
   251                           
   252  0070                     ?_UART_Write_Text:	
   253                           ; 1 bytes @ 0x0
   254                           
   255  0070                     ?_main:	
   256                           ; 1 bytes @ 0x0
   257                           
   258  0070                     ?_hienthitocdo:	
   259                           ; 1 bytes @ 0x0
   260                           
   261  0070                     ?___wmul:	
   262                           ; 2 bytes @ 0x0
   263                           
   264  0070                     ?___awdiv:	
   265                           ; 2 bytes @ 0x0
   266                           
   267  0070                     ?___awmod:	
   268                           ; 2 bytes @ 0x0
   269                           
   270  0070                     ?___ftpack:	
   271                           ; 2 bytes @ 0x0
   272                           
   273  0070                     ?___aldiv:	
   274                           ; 3 bytes @ 0x0
   275                           
   276  0070                     UART_Write@data:	
   277                           ; 4 bytes @ 0x0
   278                           
   279  0070                     hienthitocdo@a:	
   280                           ; 1 bytes @ 0x0
   281                           
   282  0070                     ___wmul@multiplier:	
   283                           ; 2 bytes @ 0x0
   284                           
   285  0070                     ___awdiv@divisor:	
   286                           ; 2 bytes @ 0x0
   287                           
   288  0070                     ___awmod@divisor:	
   289                           ; 2 bytes @ 0x0
   290                           
   291  0070                     ___ftpack@arg:	
   292                           ; 2 bytes @ 0x0
   293                           
   294  0070                     ___aldiv@divisor:	
   295                           ; 3 bytes @ 0x0
   296                           
   297                           
   298                           ; 4 bytes @ 0x0
   299  0070                     	ds	1
   300  0071                     ??_UART_Write_Text:	
   301  0071                     ?_UART_Write_number:	
   302                           ; 1 bytes @ 0x1
   303                           
   304  0071                     UART_Write_Text@i:	
   305                           ; 1 bytes @ 0x1
   306                           
   307  0071                     UART_Write_number@a:	
   308                           ; 2 bytes @ 0x1
   309                           
   310                           
   311                           ; 2 bytes @ 0x1
   312  0071                     	ds	1
   313  0072                     ??_hienthitocdo:	
   314  0072                     ___wmul@multiplicand:	
   315                           ; 1 bytes @ 0x2
   316                           
   317  0072                     ___awdiv@dividend:	
   318                           ; 2 bytes @ 0x2
   319                           
   320  0072                     ___awmod@dividend:	
   321                           ; 2 bytes @ 0x2
   322                           
   323                           
   324                           ; 2 bytes @ 0x2
   325  0072                     	ds	1
   326  0073                     ??_UART_Write_number:	
   327  0073                     UART_Write_Text@a:	
   328                           ; 1 bytes @ 0x3
   329                           
   330  0073                     ___ftpack@exp:	
   331                           ; 1 bytes @ 0x3
   332                           
   333                           
   334                           ; 1 bytes @ 0x3
   335  0073                     	ds	1
   336  0074                     ??___wmul:	
   337  0074                     ??___awdiv:	
   338                           ; 1 bytes @ 0x4
   339                           
   340  0074                     ??___awmod:	
   341                           ; 1 bytes @ 0x4
   342                           
   343  0074                     ___ftpack@sign:	
   344                           ; 1 bytes @ 0x4
   345                           
   346  0074                     ___wmul@product:	
   347                           ; 1 bytes @ 0x4
   348                           
   349  0074                     ___aldiv@dividend:	
   350                           ; 2 bytes @ 0x4
   351                           
   352                           
   353                           ; 4 bytes @ 0x4
   354  0074                     	ds	1
   355  0075                     ??___ftpack:	
   356  0075                     ___awdiv@counter:	
   357                           ; 1 bytes @ 0x5
   358                           
   359  0075                     ___awmod@counter:	
   360                           ; 1 bytes @ 0x5
   361                           
   362                           
   363                           ; 1 bytes @ 0x5
   364  0075                     	ds	1
   365  0076                     ?___lwdiv:	
   366  0076                     ___awdiv@sign:	
   367                           ; 2 bytes @ 0x6
   368                           
   369  0076                     ___awmod@sign:	
   370                           ; 1 bytes @ 0x6
   371                           
   372  0076                     ___lwdiv@divisor:	
   373                           ; 1 bytes @ 0x6
   374                           
   375                           
   376                           ; 2 bytes @ 0x6
   377  0076                     	ds	1
   378  0077                     ___awdiv@quotient:	
   379                           
   380                           ; 2 bytes @ 0x7
   381  0077                     	ds	1
   382  0078                     ??___aldiv:	
   383  0078                     ?___lbtoft:	
   384                           ; 1 bytes @ 0x8
   385                           
   386  0078                     ___lwdiv@dividend:	
   387                           ; 3 bytes @ 0x8
   388                           
   389                           
   390                           ; 2 bytes @ 0x8
   391  0078                     	ds	1
   392  0079                     UARTinit@x:	
   393                           
   394                           ; 2 bytes @ 0x9
   395  0079                     	ds	1
   396  007A                     ??___lwdiv:	
   397                           
   398                           ; 1 bytes @ 0xA
   399  007A                     	ds	1
   400  007B                     ___lbtoft@c:	
   401  007B                     ___lwdiv@quotient:	
   402                           ; 1 bytes @ 0xB
   403                           
   404                           
   405                           ; 2 bytes @ 0xB
   406  007B                     	ds	2
   407  007D                     ___lwdiv@counter:	
   408                           
   409                           ; 1 bytes @ 0xD
   410  007D                     	ds	1
   411  007E                     ??_main:	
   412                           
   413                           	psect	cstackBANK0
   414  0020                     __pcstackBANK0:	
   415                           ; 1 bytes @ 0xE
   416                           
   417  0020                     ??___lbtoft:	
   418  0020                     ___aldiv@counter:	
   419                           ; 1 bytes @ 0x0
   420                           
   421                           
   422                           ; 1 bytes @ 0x0
   423  0020                     	ds	1
   424  0021                     ___aldiv@sign:	
   425                           
   426                           ; 1 bytes @ 0x1
   427  0021                     	ds	1
   428  0022                     ___aldiv@quotient:	
   429                           
   430                           ; 4 bytes @ 0x2
   431  0022                     	ds	2
   432  0024                     ?___ftmul:	
   433  0024                     ___ftmul@f1:	
   434                           ; 3 bytes @ 0x4
   435                           
   436                           
   437                           ; 3 bytes @ 0x4
   438  0024                     	ds	2
   439  0026                     ?_PWM_DutyCycle:	
   440  0026                     ?_UARTinit:	
   441                           ; 1 bytes @ 0x6
   442                           
   443  0026                     PWM_DutyCycle@duty:	
   444                           ; 1 bytes @ 0x6
   445                           
   446  0026                     UARTinit@baudrate:	
   447                           ; 2 bytes @ 0x6
   448                           
   449                           
   450                           ; 4 bytes @ 0x6
   451  0026                     	ds	1
   452  0027                     ___ftmul@f2:	
   453                           
   454                           ; 3 bytes @ 0x7
   455  0027                     	ds	1
   456  0028                     ??_PWM_DutyCycle:	
   457                           
   458                           ; 1 bytes @ 0x8
   459  0028                     	ds	2
   460  002A                     ??_UARTinit:	
   461  002A                     ??___ftmul:	
   462                           ; 1 bytes @ 0xA
   463                           
   464                           
   465                           ; 1 bytes @ 0xA
   466  002A                     	ds	4
   467  002E                     ___ftmul@exp:	
   468                           
   469                           ; 1 bytes @ 0xE
   470  002E                     	ds	1
   471  002F                     ___ftmul@f3_as_product:	
   472                           
   473                           ; 3 bytes @ 0xF
   474  002F                     	ds	3
   475  0032                     ___ftmul@cntr:	
   476                           
   477                           ; 1 bytes @ 0x12
   478  0032                     	ds	1
   479  0033                     ___ftmul@sign:	
   480                           
   481                           ; 1 bytes @ 0x13
   482  0033                     	ds	1
   483  0034                     ?___ftdiv:	
   484  0034                     ___ftdiv@f2:	
   485                           ; 3 bytes @ 0x14
   486                           
   487                           
   488                           ; 3 bytes @ 0x14
   489  0034                     	ds	3
   490  0037                     ___ftdiv@f1:	
   491                           
   492                           ; 3 bytes @ 0x17
   493  0037                     	ds	3
   494  003A                     ??___ftdiv:	
   495                           
   496                           ; 1 bytes @ 0x1A
   497  003A                     	ds	4
   498  003E                     ___ftdiv@cntr:	
   499                           
   500                           ; 1 bytes @ 0x1E
   501  003E                     	ds	1
   502  003F                     ___ftdiv@f3:	
   503                           
   504                           ; 3 bytes @ 0x1F
   505  003F                     	ds	3
   506  0042                     ___ftdiv@exp:	
   507                           
   508                           ; 1 bytes @ 0x22
   509  0042                     	ds	1
   510  0043                     ___ftdiv@sign:	
   511                           
   512                           ; 1 bytes @ 0x23
   513  0043                     	ds	1
   514  0044                     ?___fttol:	
   515  0044                     ___fttol@f1:	
   516                           ; 4 bytes @ 0x24
   517                           
   518                           
   519                           ; 3 bytes @ 0x24
   520  0044                     	ds	4
   521  0048                     ??___fttol:	
   522                           
   523                           ; 1 bytes @ 0x28
   524  0048                     	ds	4
   525  004C                     ___fttol@sign1:	
   526                           
   527                           ; 1 bytes @ 0x2C
   528  004C                     	ds	1
   529  004D                     ___fttol@lval:	
   530                           
   531                           ; 4 bytes @ 0x2D
   532  004D                     	ds	4
   533  0051                     ___fttol@exp1:	
   534                           
   535                           ; 1 bytes @ 0x31
   536  0051                     	ds	1
   537  0052                     ??_hienthiled:	
   538                           
   539                           ; 1 bytes @ 0x32
   540  0052                     	ds	4
   541  0056                     hienthiled@bcdnhietdo:	
   542                           
   543                           ; 2 bytes @ 0x36
   544  0056                     	ds	2
   545  0058                     hienthiled@shift:	
   546                           
   547                           ; 2 bytes @ 0x38
   548  0058                     	ds	2
   549  005A                     hienthiled@nhietdo:	
   550                           
   551                           ; 2 bytes @ 0x3A
   552  005A                     	ds	2
   553  005C                     main@temp1:	
   554                           
   555                           ; 2 bytes @ 0x3C
   556  005C                     	ds	2
   557  005E                     main@chuc:	
   558                           
   559                           ; 2 bytes @ 0x3E
   560  005E                     	ds	2
   561  0060                     main@donvi:	
   562                           
   563                           ; 2 bytes @ 0x40
   564  0060                     	ds	2
   565                           
   566                           	psect	maintext
   567  06D4                     __pmaintext:	
   568 ;;
   569 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   570 ;;
   571 ;; *************** function _main *****************
   572 ;; Defined at:
   573 ;;		line 188 in file "VXL_main.c"
   574 ;; Parameters:    Size  Location     Type
   575 ;;		None
   576 ;; Auto vars:     Size  Location     Type
   577 ;;  donvi           2   64[BANK0 ] int 
   578 ;;  chuc            2   62[BANK0 ] int 
   579 ;;  temp1           2   60[BANK0 ] int 
   580 ;; Return value:  Size  Location     Type
   581 ;;                  1    wreg      void 
   582 ;; Registers used:
   583 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   584 ;; Tracked objects:
   585 ;;		On entry : B00/0
   586 ;;		On exit  : 0/0
   587 ;;		Unchanged: 0/0
   588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   589 ;;      Params:         0       0       0       0       0
   590 ;;      Locals:         0       6       0       0       0
   591 ;;      Temps:          0       0       0       0       0
   592 ;;      Totals:         0       6       0       0       0
   593 ;;Total ram usage:        6 bytes
   594 ;; Hardware stack levels required when called:    3
   595 ;; This function calls:
   596 ;;		_ADCinit
   597 ;;		_PWM_DutyCycle
   598 ;;		_PWM_Initalize
   599 ;;		_UART_Write
   600 ;;		_UART_Write_Text
   601 ;;		_UART_Write_number
   602 ;;		_UARTinit
   603 ;;		___awdiv
   604 ;;		___awmod
   605 ;;		_hienthiled
   606 ;;		_hienthitocdo
   607 ;; This function is called by:
   608 ;;		Startup code after reset
   609 ;; This function uses a non-reentrant model
   610 ;;
   611                           
   612                           
   613                           ;psect for function _main
   614  06D4                     _main:	
   615                           
   616                           ;VXL_main.c: 190: UARTinit(1200);
   617                           
   618                           ;incstack = 0
   619                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   620  06D4  3000               	movlw	0
   621  06D5  1283               	bcf	3,5	;RP0=0, select bank0
   622  06D6  1303               	bcf	3,6	;RP1=0, select bank0
   623  06D7  00A9               	movwf	UARTinit@baudrate+3
   624  06D8  3000               	movlw	0
   625  06D9  00A8               	movwf	UARTinit@baudrate+2
   626  06DA  3004               	movlw	4
   627  06DB  00A7               	movwf	UARTinit@baudrate+1
   628  06DC  30B0               	movlw	176
   629  06DD  00A6               	movwf	UARTinit@baudrate
   630  06DE  120A  118A  25F0  120A  118A  	fcall	_UARTinit
   631                           
   632                           ;VXL_main.c: 191: ADCinit();
   633  06E3  120A  158A  27E3  120A  118A  	fcall	_ADCinit
   634                           
   635                           ;VXL_main.c: 192: PWM_Initalize();
   636  06E8  120A  158A  27B2  120A  118A  	fcall	_PWM_Initalize
   637  06ED                     l137:	
   638                           ;VXL_main.c: 193: while(1)
   639                           
   640                           
   641                           ;VXL_main.c: 194: {
   642                           ;VXL_main.c: 195: int temp1 = temp;
   643  06ED  1283               	bcf	3,5	;RP0=0, select bank0
   644  06EE  1303               	bcf	3,6	;RP1=0, select bank0
   645  06EF  0867               	movf	_temp+1,w
   646  06F0  00DD               	movwf	main@temp1+1
   647  06F1  0866               	movf	_temp,w
   648  06F2  00DC               	movwf	main@temp1
   649                           
   650                           ;VXL_main.c: 196: if(ADCON0bits.GO_DONE == 0)
   651  06F3  191F               	btfsc	31,2	;volatile
   652  06F4  2EFA               	goto	l1662
   653                           
   654                           ;VXL_main.c: 197: {
   655                           ;VXL_main.c: 198: hienthiled();
   656  06F5  120A  118A  23C2  120A  118A  	fcall	_hienthiled
   657  06FA                     l1662:	
   658                           
   659                           ;VXL_main.c: 199: }
   660                           ;VXL_main.c: 200: if(temp<25)
   661  06FA  1283               	bcf	3,5	;RP0=0, select bank0
   662  06FB  1303               	bcf	3,6	;RP1=0, select bank0
   663  06FC  0867               	movf	_temp+1,w
   664  06FD  3A80               	xorlw	128
   665  06FE  00FF               	movwf	127
   666  06FF  3080               	movlw	128
   667  0700  027F               	subwf	127,w
   668  0701  1D03               	skipz
   669  0702  2F05               	goto	u2035
   670  0703  3019               	movlw	25
   671  0704  0266               	subwf	_temp,w
   672  0705                     u2035:	
   673  0705  1803               	skipnc
   674  0706  2F18               	goto	l1670
   675                           
   676                           ;VXL_main.c: 201: {
   677                           ;VXL_main.c: 202: tocdo = 0;
   678  0707  1283               	bcf	3,5	;RP0=0, select bank0
   679  0708  1303               	bcf	3,6	;RP1=0, select bank0
   680  0709  01E8               	clrf	_tocdo
   681  070A  01E9               	clrf	_tocdo+1
   682                           
   683                           ;VXL_main.c: 203: hienthitocdo(0);
   684  070B  3000               	movlw	0
   685  070C  00F0               	movwf	hienthitocdo@a
   686  070D  00F1               	movwf	hienthitocdo@a+1
   687  070E  120A  118A  2048  120A  118A  	fcall	_hienthitocdo
   688                           
   689                           ;VXL_main.c: 204: PWM_DutyCycle(0);
   690  0713  3000               	movlw	0
   691  0714  1283               	bcf	3,5	;RP0=0, select bank0
   692  0715  1303               	bcf	3,6	;RP1=0, select bank0
   693  0716  00A6               	movwf	PWM_DutyCycle@duty
   694  0717  2F82               	goto	L1
   695  0718                     l1670:	
   696                           ;VXL_main.c: 205: }
   697                           
   698                           
   699                           ;VXL_main.c: 206: else if(25<temp && temp <30)
   700  0718  1283               	bcf	3,5	;RP0=0, select bank0
   701  0719  1303               	bcf	3,6	;RP1=0, select bank0
   702  071A  0867               	movf	_temp+1,w
   703  071B  3A80               	xorlw	128
   704  071C  00FF               	movwf	127
   705  071D  3080               	movlw	128
   706  071E  027F               	subwf	127,w
   707  071F  1D03               	skipz
   708  0720  2F23               	goto	u2045
   709  0721  301A               	movlw	26
   710  0722  0266               	subwf	_temp,w
   711  0723                     u2045:	
   712  0723  1C03               	skipc
   713  0724  2F43               	goto	l1680
   714  0725  1283               	bcf	3,5	;RP0=0, select bank0
   715  0726  1303               	bcf	3,6	;RP1=0, select bank0
   716  0727  0867               	movf	_temp+1,w
   717  0728  3A80               	xorlw	128
   718  0729  00FF               	movwf	127
   719  072A  3080               	movlw	128
   720  072B  027F               	subwf	127,w
   721  072C  1D03               	skipz
   722  072D  2F30               	goto	u2055
   723  072E  301E               	movlw	30
   724  072F  0266               	subwf	_temp,w
   725  0730                     u2055:	
   726  0730  1803               	skipnc
   727  0731  2F43               	goto	l1680
   728                           
   729                           ;VXL_main.c: 207: {
   730                           ;VXL_main.c: 208: tocdo = 1;
   731  0732  3001               	movlw	1
   732  0733  1283               	bcf	3,5	;RP0=0, select bank0
   733  0734  1303               	bcf	3,6	;RP1=0, select bank0
   734  0735  00E8               	movwf	_tocdo
   735  0736  3000               	movlw	0
   736  0737  00E9               	movwf	_tocdo+1
   737                           
   738                           ;VXL_main.c: 209: hienthitocdo(1);
   739  0738  3001               	movlw	1
   740  0739  00F0               	movwf	hienthitocdo@a
   741  073A  3000               	movlw	0
   742  073B  00F1               	movwf	hienthitocdo@a+1
   743  073C  120A  118A  2048  120A  118A  	fcall	_hienthitocdo
   744                           
   745                           ;VXL_main.c: 210: PWM_DutyCycle(25);
   746  0741  3019               	movlw	25
   747  0742  2F7E               	goto	L2
   748  0743                     l1680:	
   749                           ;VXL_main.c: 211: }
   750                           
   751                           
   752                           ;VXL_main.c: 212: else if(30<temp && temp <35)
   753  0743  1283               	bcf	3,5	;RP0=0, select bank0
   754  0744  1303               	bcf	3,6	;RP1=0, select bank0
   755  0745  0867               	movf	_temp+1,w
   756  0746  3A80               	xorlw	128
   757  0747  00FF               	movwf	127
   758  0748  3080               	movlw	128
   759  0749  027F               	subwf	127,w
   760  074A  1D03               	skipz
   761  074B  2F4E               	goto	u2065
   762  074C  301F               	movlw	31
   763  074D  0266               	subwf	_temp,w
   764  074E                     u2065:	
   765  074E  1C03               	skipc
   766  074F  2F6E               	goto	l1690
   767  0750  1283               	bcf	3,5	;RP0=0, select bank0
   768  0751  1303               	bcf	3,6	;RP1=0, select bank0
   769  0752  0867               	movf	_temp+1,w
   770  0753  3A80               	xorlw	128
   771  0754  00FF               	movwf	127
   772  0755  3080               	movlw	128
   773  0756  027F               	subwf	127,w
   774  0757  1D03               	skipz
   775  0758  2F5B               	goto	u2075
   776  0759  3023               	movlw	35
   777  075A  0266               	subwf	_temp,w
   778  075B                     u2075:	
   779  075B  1803               	skipnc
   780  075C  2F6E               	goto	l1690
   781                           
   782                           ;VXL_main.c: 213: {
   783                           ;VXL_main.c: 214: tocdo = 2;
   784  075D  3002               	movlw	2
   785  075E  1283               	bcf	3,5	;RP0=0, select bank0
   786  075F  1303               	bcf	3,6	;RP1=0, select bank0
   787  0760  00E8               	movwf	_tocdo
   788  0761  3000               	movlw	0
   789  0762  00E9               	movwf	_tocdo+1
   790                           
   791                           ;VXL_main.c: 215: hienthitocdo(2);
   792  0763  3002               	movlw	2
   793  0764  00F0               	movwf	hienthitocdo@a
   794  0765  3000               	movlw	0
   795  0766  00F1               	movwf	hienthitocdo@a+1
   796  0767  120A  118A  2048  120A  118A  	fcall	_hienthitocdo
   797                           
   798                           ;VXL_main.c: 216: PWM_DutyCycle(50);
   799  076C  3032               	movlw	50
   800  076D  2F7E               	goto	L2
   801  076E                     l1690:	
   802                           ;VXL_main.c: 217: }
   803                           
   804                           
   805                           ;VXL_main.c: 218: else
   806                           ;VXL_main.c: 219: {
   807                           ;VXL_main.c: 220: tocdo = 3;
   808  076E  3003               	movlw	3
   809  076F  1283               	bcf	3,5	;RP0=0, select bank0
   810  0770  1303               	bcf	3,6	;RP1=0, select bank0
   811  0771  00E8               	movwf	_tocdo
   812  0772  3000               	movlw	0
   813  0773  00E9               	movwf	_tocdo+1
   814                           
   815                           ;VXL_main.c: 221: hienthitocdo(3);
   816  0774  3003               	movlw	3
   817  0775  00F0               	movwf	hienthitocdo@a
   818  0776  3000               	movlw	0
   819  0777  00F1               	movwf	hienthitocdo@a+1
   820  0778  120A  118A  2048  120A  118A  	fcall	_hienthitocdo
   821                           
   822                           ;VXL_main.c: 222: PWM_DutyCycle(100);
   823  077D  3064               	movlw	100
   824  077E                     L2:	
   825  077E  1283               	bcf	3,5	;RP0=0, select bank0
   826  077F  1303               	bcf	3,6	;RP1=0, select bank0
   827  0780  00A6               	movwf	PWM_DutyCycle@duty
   828  0781  3000               	movlw	0
   829  0782                     L1:	
   830  0782  00A7               	movwf	PWM_DutyCycle@duty+1
   831  0783  120A  118A  221E  120A  118A  	fcall	_PWM_DutyCycle
   832                           
   833                           ;VXL_main.c: 223: }
   834                           ;VXL_main.c: 224: if(temp1 != temp)
   835  0788  1283               	bcf	3,5	;RP0=0, select bank0
   836  0789  1303               	bcf	3,6	;RP1=0, select bank0
   837  078A  0867               	movf	_temp+1,w
   838  078B  065D               	xorwf	main@temp1+1,w
   839  078C  1D03               	skipz
   840  078D  2F90               	goto	u2085
   841  078E  0866               	movf	_temp,w
   842  078F  065C               	xorwf	main@temp1,w
   843  0790                     u2085:	
   844  0790  1903               	skipnz
   845  0791  2EED               	goto	l137
   846                           
   847                           ;VXL_main.c: 225: {
   848                           ;VXL_main.c: 226: UART_Write_Text("Nhiet do: ");
   849  0792  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   850  0793  120A  118A  2026  120A  118A  	fcall	_UART_Write_Text
   851                           
   852                           ;VXL_main.c: 227: int chuc=temp/10;
   853  0798  300A               	movlw	10
   854  0799  00F0               	movwf	___awdiv@divisor
   855  079A  3000               	movlw	0
   856  079B  00F1               	movwf	___awdiv@divisor+1
   857  079C  1283               	bcf	3,5	;RP0=0, select bank0
   858  079D  1303               	bcf	3,6	;RP1=0, select bank0
   859  079E  0867               	movf	_temp+1,w
   860  079F  00F3               	movwf	___awdiv@dividend+1
   861  07A0  0866               	movf	_temp,w
   862  07A1  00F2               	movwf	___awdiv@dividend
   863  07A2  120A  118A  2159  120A  118A  	fcall	___awdiv
   864  07A7  0871               	movf	?___awdiv+1,w
   865  07A8  1283               	bcf	3,5	;RP0=0, select bank0
   866  07A9  1303               	bcf	3,6	;RP1=0, select bank0
   867  07AA  00DF               	movwf	main@chuc+1
   868  07AB  0870               	movf	?___awdiv,w
   869  07AC  00DE               	movwf	main@chuc
   870                           
   871                           ;VXL_main.c: 228: int donvi=temp%10;
   872  07AD  300A               	movlw	10
   873  07AE  00F0               	movwf	___awmod@divisor
   874  07AF  3000               	movlw	0
   875  07B0  00F1               	movwf	___awmod@divisor+1
   876  07B1  0867               	movf	_temp+1,w
   877  07B2  00F3               	movwf	___awmod@dividend+1
   878  07B3  0866               	movf	_temp,w
   879  07B4  00F2               	movwf	___awmod@dividend
   880  07B5  120A  118A  20B5  120A  118A  	fcall	___awmod
   881  07BA  0871               	movf	?___awmod+1,w
   882  07BB  1283               	bcf	3,5	;RP0=0, select bank0
   883  07BC  1303               	bcf	3,6	;RP1=0, select bank0
   884  07BD  00E1               	movwf	main@donvi+1
   885  07BE  0870               	movf	?___awmod,w
   886  07BF  00E0               	movwf	main@donvi
   887                           
   888                           ;VXL_main.c: 229: UART_Write_number(chuc);
   889  07C0  085F               	movf	main@chuc+1,w
   890  07C1  00F2               	movwf	UART_Write_number@a+1
   891  07C2  085E               	movf	main@chuc,w
   892  07C3  00F1               	movwf	UART_Write_number@a
   893  07C4  120A  118A  2100  120A  118A  	fcall	_UART_Write_number
   894                           
   895                           ;VXL_main.c: 230: UART_Write_number(donvi);
   896  07C9  1283               	bcf	3,5	;RP0=0, select bank0
   897  07CA  1303               	bcf	3,6	;RP1=0, select bank0
   898  07CB  0861               	movf	main@donvi+1,w
   899  07CC  00F2               	movwf	UART_Write_number@a+1
   900  07CD  0860               	movf	main@donvi,w
   901  07CE  00F1               	movwf	UART_Write_number@a
   902  07CF  120A  118A  2100  120A  118A  	fcall	_UART_Write_number
   903                           
   904                           ;VXL_main.c: 231: UART_Write(0x0D);
   905  07D4  300D               	movlw	13
   906  07D5  120A  158A  27A8  120A  118A  	fcall	_UART_Write
   907                           
   908                           ;VXL_main.c: 232: UART_Write_Text("Toc do: ");
   909  07DA  300C               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   910  07DB  120A  118A  2026  120A  118A  	fcall	_UART_Write_Text
   911                           
   912                           ;VXL_main.c: 233: UART_Write_number(tocdo);
   913  07E0  1283               	bcf	3,5	;RP0=0, select bank0
   914  07E1  1303               	bcf	3,6	;RP1=0, select bank0
   915  07E2  0869               	movf	_tocdo+1,w
   916  07E3  00F2               	movwf	UART_Write_number@a+1
   917  07E4  0868               	movf	_tocdo,w
   918  07E5  00F1               	movwf	UART_Write_number@a
   919  07E6  120A  118A  2100  120A  118A  	fcall	_UART_Write_number
   920                           
   921                           ;VXL_main.c: 234: UART_Write(0x0D);
   922  07EB  300D               	movlw	13
   923  07EC  120A  158A  27A8  120A  118A  	fcall	_UART_Write
   924  07F1  2EED               	goto	l137
   925  07F2                     __end_of_main:	
   926                           
   927                           	psect	text1
   928  0048                     __ptext1:	
   929 ;; *************** function _hienthitocdo *****************
   930 ;; Defined at:
   931 ;;		line 97 in file "VXL_main.c"
   932 ;; Parameters:    Size  Location     Type
   933 ;;  a               2    0[COMMON] int 
   934 ;; Auto vars:     Size  Location     Type
   935 ;;		None
   936 ;; Return value:  Size  Location     Type
   937 ;;                  2    0[COMMON] int 
   938 ;; Registers used:
   939 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   940 ;; Tracked objects:
   941 ;;		On entry : 0/0
   942 ;;		On exit  : 0/0
   943 ;;		Unchanged: 0/0
   944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   945 ;;      Params:         2       0       0       0       0
   946 ;;      Locals:         0       0       0       0       0
   947 ;;      Temps:          0       0       0       0       0
   948 ;;      Totals:         2       0       0       0       0
   949 ;;Total ram usage:        2 bytes
   950 ;; Hardware stack levels used:    1
   951 ;; This function calls:
   952 ;;		Nothing
   953 ;; This function is called by:
   954 ;;		_main
   955 ;; This function uses a non-reentrant model
   956 ;;
   957                           
   958                           
   959                           ;psect for function _hienthitocdo
   960  0048                     _hienthitocdo:	
   961                           
   962                           ;VXL_main.c: 99: switch(a)
   963                           
   964                           ;incstack = 0
   965                           ; Regs used in _hienthitocdo: [wreg-fsr0h+status,2+status,0]
   966  0048  2865               	goto	l1586
   967  0049                     l89:	
   968                           ;VXL_main.c: 100: {
   969                           ;VXL_main.c: 101: case 0:
   970                           
   971                           
   972                           ;VXL_main.c: 102: PORTDbits.RD4 = 0;
   973  0049  1283               	bcf	3,5	;RP0=0, select bank0
   974  004A  1303               	bcf	3,6	;RP1=0, select bank0
   975  004B  1208               	bcf	8,4	;volatile
   976                           
   977                           ;VXL_main.c: 103: PORTDbits.RD5 = 0;
   978  004C  1288               	bcf	8,5	;volatile
   979                           
   980                           ;VXL_main.c: 104: PORTDbits.RD6 = 0;
   981  004D  1308               	bcf	8,6	;volatile
   982                           
   983                           ;VXL_main.c: 105: PORTDbits.RD7 = 0;
   984  004E  1388               	bcf	8,7	;volatile
   985                           
   986                           ;VXL_main.c: 106: break;
   987  004F  0008               	return
   988  0050                     l91:	
   989                           ;VXL_main.c: 107: case 1:
   990                           
   991                           
   992                           ;VXL_main.c: 108: PORTDbits.RD4 = 1;
   993  0050  1283               	bcf	3,5	;RP0=0, select bank0
   994  0051  1303               	bcf	3,6	;RP1=0, select bank0
   995  0052  1608               	bsf	8,4	;volatile
   996                           
   997                           ;VXL_main.c: 109: PORTDbits.RD5 = 0;
   998  0053  1288               	bcf	8,5	;volatile
   999                           
  1000                           ;VXL_main.c: 110: PORTDbits.RD6 = 0;
  1001  0054  1308               	bcf	8,6	;volatile
  1002                           
  1003                           ;VXL_main.c: 111: PORTDbits.RD7 = 0;
  1004  0055  1388               	bcf	8,7	;volatile
  1005                           
  1006                           ;VXL_main.c: 112: break;
  1007  0056  0008               	return
  1008  0057                     l92:	
  1009                           ;VXL_main.c: 113: case 2:
  1010                           
  1011                           
  1012                           ;VXL_main.c: 114: PORTDbits.RD4 = 0;
  1013  0057  1283               	bcf	3,5	;RP0=0, select bank0
  1014  0058  1303               	bcf	3,6	;RP1=0, select bank0
  1015  0059  1208               	bcf	8,4	;volatile
  1016                           
  1017                           ;VXL_main.c: 115: PORTDbits.RD5 = 1;
  1018  005A  1688               	bsf	8,5	;volatile
  1019                           
  1020                           ;VXL_main.c: 116: PORTDbits.RD6 = 0;
  1021  005B  1308               	bcf	8,6	;volatile
  1022                           
  1023                           ;VXL_main.c: 117: PORTDbits.RD7 = 0;
  1024  005C  1388               	bcf	8,7	;volatile
  1025                           
  1026                           ;VXL_main.c: 118: break;
  1027  005D  0008               	return
  1028  005E                     l93:	
  1029                           ;VXL_main.c: 119: case 3:
  1030                           
  1031                           
  1032                           ;VXL_main.c: 120: PORTDbits.RD4 = 1;
  1033  005E  1283               	bcf	3,5	;RP0=0, select bank0
  1034  005F  1303               	bcf	3,6	;RP1=0, select bank0
  1035  0060  1608               	bsf	8,4	;volatile
  1036                           
  1037                           ;VXL_main.c: 121: PORTDbits.RD5 = 1;
  1038  0061  1688               	bsf	8,5	;volatile
  1039                           
  1040                           ;VXL_main.c: 122: PORTDbits.RD6 = 0;
  1041  0062  1308               	bcf	8,6	;volatile
  1042                           
  1043                           ;VXL_main.c: 123: PORTDbits.RD7 = 0;
  1044  0063  1388               	bcf	8,7	;volatile
  1045                           
  1046                           ;VXL_main.c: 125: }
  1047                           
  1048                           ;VXL_main.c: 124: break;
  1049  0064  0008               	return
  1050  0065                     l1586:	
  1051                           
  1052                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1053                           ; Switch size 1, requested type "space"
  1054                           ; Number of cases is 1, Range of values is 0 to 0
  1055                           ; switch strategies available:
  1056                           ; Name         Instructions Cycles
  1057                           ; simple_byte            4     3 (average)
  1058                           ; direct_byte           11     8 (fixed)
  1059                           ; jumptable            260     6 (fixed)
  1060                           ;	Chosen strategy is simple_byte
  1061  0065  0871               	movf	hienthitocdo@a+1,w
  1062  0066  3A00               	xorlw	0	; case 0
  1063  0067  1903               	skipnz
  1064  0068  286A               	goto	l1752
  1065  0069  2878               	goto	l94
  1066  006A                     l1752:	
  1067                           
  1068                           ; Switch size 1, requested type "space"
  1069                           ; Number of cases is 4, Range of values is 0 to 3
  1070                           ; switch strategies available:
  1071                           ; Name         Instructions Cycles
  1072                           ; simple_byte           13     7 (average)
  1073                           ; direct_byte           20     8 (fixed)
  1074                           ; jumptable            260     6 (fixed)
  1075                           ;	Chosen strategy is simple_byte
  1076  006A  0870               	movf	hienthitocdo@a,w
  1077  006B  3A00               	xorlw	0	; case 0
  1078  006C  1903               	skipnz
  1079  006D  2849               	goto	l89
  1080  006E  3A01               	xorlw	1	; case 1
  1081  006F  1903               	skipnz
  1082  0070  2850               	goto	l91
  1083  0071  3A03               	xorlw	3	; case 2
  1084  0072  1903               	skipnz
  1085  0073  2857               	goto	l92
  1086  0074  3A01               	xorlw	1	; case 3
  1087  0075  1903               	skipnz
  1088  0076  285E               	goto	l93
  1089  0077  2878               	goto	l94
  1090  0078                     l94:	
  1091  0078  0008               	return
  1092  0079                     __end_of_hienthitocdo:	
  1093                           
  1094                           	psect	text2
  1095  03C2                     __ptext2:	
  1096 ;; *************** function _hienthiled *****************
  1097 ;; Defined at:
  1098 ;;		line 83 in file "VXL_main.c"
  1099 ;; Parameters:    Size  Location     Type
  1100 ;;		None
  1101 ;; Auto vars:     Size  Location     Type
  1102 ;;  nhietdo         2   58[BANK0 ] int 
  1103 ;;  shift           2   56[BANK0 ] int 
  1104 ;;  bcdnhietdo      2   54[BANK0 ] int 
  1105 ;; Return value:  Size  Location     Type
  1106 ;;                  1    wreg      void 
  1107 ;; Registers used:
  1108 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1109 ;; Tracked objects:
  1110 ;;		On entry : 0/0
  1111 ;;		On exit  : 0/0
  1112 ;;		Unchanged: 0/0
  1113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1114 ;;      Params:         0       0       0       0       0
  1115 ;;      Locals:         0       6       0       0       0
  1116 ;;      Temps:          0       4       0       0       0
  1117 ;;      Totals:         0      10       0       0       0
  1118 ;;Total ram usage:       10 bytes
  1119 ;; Hardware stack levels used:    1
  1120 ;; Hardware stack levels required when called:    2
  1121 ;; This function calls:
  1122 ;;		___awdiv
  1123 ;;		___awmod
  1124 ;;		___ftdiv
  1125 ;;		___ftmul
  1126 ;;		___fttol
  1127 ;;		___lbtoft
  1128 ;; This function is called by:
  1129 ;;		_main
  1130 ;; This function uses a non-reentrant model
  1131 ;;
  1132                           
  1133                           
  1134                           ;psect for function _hienthiled
  1135  03C2                     _hienthiled:	
  1136                           
  1137                           ;VXL_main.c: 85: int nhietdo = 0;
  1138                           
  1139                           ;incstack = 0
  1140                           ; Regs used in _hienthiled: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1141  03C2  1283               	bcf	3,5	;RP0=0, select bank0
  1142  03C3  1303               	bcf	3,6	;RP1=0, select bank0
  1143  03C4  01DA               	clrf	hienthiled@nhietdo
  1144  03C5  01DB               	clrf	hienthiled@nhietdo+1
  1145                           
  1146                           ;VXL_main.c: 86: int bcdnhietdo= 0;
  1147  03C6  01D6               	clrf	hienthiled@bcdnhietdo
  1148  03C7  01D7               	clrf	hienthiled@bcdnhietdo+1
  1149                           
  1150                           ;VXL_main.c: 87: int shift = 0;
  1151  03C8  01D8               	clrf	hienthiled@shift
  1152  03C9  01D9               	clrf	hienthiled@shift+1
  1153                           
  1154                           ;VXL_main.c: 88: ADCON0bits.GO_DONE = 1;
  1155  03CA  151F               	bsf	31,2	;volatile
  1156                           
  1157                           ;VXL_main.c: 89: nhietdo = ADRESL*500.0/1023;
  1158  03CB  1683               	bsf	3,5	;RP0=1, select bank1
  1159  03CC  1303               	bcf	3,6	;RP1=0, select bank1
  1160  03CD  081E               	movf	30,w	;volatile
  1161  03CE  120A  158A  27C7  120A  118A  	fcall	___lbtoft
  1162  03D3  0878               	movf	?___lbtoft,w
  1163  03D4  1283               	bcf	3,5	;RP0=0, select bank0
  1164  03D5  1303               	bcf	3,6	;RP1=0, select bank0
  1165  03D6  00A7               	movwf	___ftmul@f2
  1166  03D7  0879               	movf	?___lbtoft+1,w
  1167  03D8  00A8               	movwf	___ftmul@f2+1
  1168  03D9  087A               	movf	?___lbtoft+2,w
  1169  03DA  00A9               	movwf	___ftmul@f2+2
  1170  03DB  3000               	movlw	0
  1171  03DC  00A4               	movwf	___ftmul@f1
  1172  03DD  30FA               	movlw	250
  1173  03DE  00A5               	movwf	___ftmul@f1+1
  1174  03DF  3043               	movlw	67
  1175  03E0  00A6               	movwf	___ftmul@f1+2
  1176  03E1  120A  118A  251D  120A  118A  	fcall	___ftmul
  1177  03E6  1283               	bcf	3,5	;RP0=0, select bank0
  1178  03E7  1303               	bcf	3,6	;RP1=0, select bank0
  1179  03E8  0824               	movf	?___ftmul,w
  1180  03E9  00B7               	movwf	___ftdiv@f1
  1181  03EA  0825               	movf	?___ftmul+1,w
  1182  03EB  00B8               	movwf	___ftdiv@f1+1
  1183  03EC  0826               	movf	?___ftmul+2,w
  1184  03ED  00B9               	movwf	___ftdiv@f1+2
  1185  03EE  30C0               	movlw	192
  1186  03EF  00B4               	movwf	___ftdiv@f2
  1187  03F0  307F               	movlw	127
  1188  03F1  00B5               	movwf	___ftdiv@f2+1
  1189  03F2  3044               	movlw	68
  1190  03F3  00B6               	movwf	___ftdiv@f2+2
  1191  03F4  120A  118A  2465  120A  118A  	fcall	___ftdiv
  1192  03F9  1283               	bcf	3,5	;RP0=0, select bank0
  1193  03FA  1303               	bcf	3,6	;RP1=0, select bank0
  1194  03FB  0834               	movf	?___ftdiv,w
  1195  03FC  00C4               	movwf	___fttol@f1
  1196  03FD  0835               	movf	?___ftdiv+1,w
  1197  03FE  00C5               	movwf	___fttol@f1+1
  1198  03FF  0836               	movf	?___ftdiv+2,w
  1199  0400  00C6               	movwf	___fttol@f1+2
  1200  0401  120A  118A  22A5  120A  118A  	fcall	___fttol
  1201  0406  1283               	bcf	3,5	;RP0=0, select bank0
  1202  0407  1303               	bcf	3,6	;RP1=0, select bank0
  1203  0408  0845               	movf	?___fttol+1,w
  1204  0409  00DB               	movwf	hienthiled@nhietdo+1
  1205  040A  0844               	movf	?___fttol,w
  1206  040B  00DA               	movwf	hienthiled@nhietdo
  1207                           
  1208                           ;VXL_main.c: 90: temp=nhietdo;
  1209  040C  085B               	movf	hienthiled@nhietdo+1,w
  1210  040D  00E7               	movwf	_temp+1
  1211  040E  085A               	movf	hienthiled@nhietdo,w
  1212  040F  00E6               	movwf	_temp
  1213  0410                     l1578:	
  1214                           ;VXL_main.c: 91: while (nhietdo > 0) {
  1215                           
  1216  0410  085B               	movf	hienthiled@nhietdo+1,w
  1217  0411  3A80               	xorlw	128
  1218  0412  00FF               	movwf	127
  1219  0413  3080               	movlw	128
  1220  0414  027F               	subwf	127,w
  1221  0415  1D03               	skipz
  1222  0416  2C19               	goto	u1925
  1223  0417  3001               	movlw	1
  1224  0418  025A               	subwf	hienthiled@nhietdo,w
  1225  0419                     u1925:	
  1226  0419  1C03               	btfss	3,0
  1227  041A  2C60               	goto	l1580
  1228                           
  1229                           ;VXL_main.c: 92: bcdnhietdo |= (nhietdo % 10) << (shift++ << 2);
  1230  041B  1283               	bcf	3,5	;RP0=0, select bank0
  1231  041C  1303               	bcf	3,6	;RP1=0, select bank0
  1232  041D  0858               	movf	hienthiled@shift,w
  1233  041E  00D2               	movwf	??_hienthiled
  1234  041F  3001               	movlw	1
  1235  0420                     u1905:	
  1236  0420  1003               	clrc
  1237  0421  0DD2               	rlf	??_hienthiled,f
  1238  0422  3EFF               	addlw	-1
  1239  0423  1D03               	skipz
  1240  0424  2C20               	goto	u1905
  1241  0425  1003               	clrc
  1242  0426  0D52               	rlf	??_hienthiled,w
  1243  0427  00D3               	movwf	??_hienthiled+1
  1244  0428  0AD3               	incf	??_hienthiled+1,f
  1245  0429  300A               	movlw	10
  1246  042A  00F0               	movwf	___awmod@divisor
  1247  042B  3000               	movlw	0
  1248  042C  00F1               	movwf	___awmod@divisor+1
  1249  042D  085B               	movf	hienthiled@nhietdo+1,w
  1250  042E  00F3               	movwf	___awmod@dividend+1
  1251  042F  085A               	movf	hienthiled@nhietdo,w
  1252  0430  00F2               	movwf	___awmod@dividend
  1253  0431  120A  118A  20B5  120A  118A  	fcall	___awmod
  1254  0436  0870               	movf	?___awmod,w
  1255  0437  1283               	bcf	3,5	;RP0=0, select bank0
  1256  0438  1303               	bcf	3,6	;RP1=0, select bank0
  1257  0439  00D4               	movwf	??_hienthiled+2
  1258  043A  0871               	movf	?___awmod+1,w
  1259  043B  00D5               	movwf	??_hienthiled+3
  1260  043C  2C40               	goto	u1914
  1261  043D                     u1915:	
  1262  043D  1003               	clrc
  1263  043E  0DD4               	rlf	??_hienthiled+2,f
  1264  043F  0DD5               	rlf	??_hienthiled+3,f
  1265  0440                     u1914:	
  1266  0440  0BD3               	decfsz	??_hienthiled+1,f
  1267  0441  2C3D               	goto	u1915
  1268  0442  0854               	movf	??_hienthiled+2,w
  1269  0443  04D6               	iorwf	hienthiled@bcdnhietdo,f
  1270  0444  0855               	movf	??_hienthiled+3,w
  1271  0445  04D7               	iorwf	hienthiled@bcdnhietdo+1,f
  1272  0446  3001               	movlw	1
  1273  0447  07D8               	addwf	hienthiled@shift,f
  1274  0448  1803               	skipnc
  1275  0449  0AD9               	incf	hienthiled@shift+1,f
  1276  044A  3000               	movlw	0
  1277  044B  07D9               	addwf	hienthiled@shift+1,f
  1278                           
  1279                           ;VXL_main.c: 93: nhietdo /= 10;
  1280  044C  300A               	movlw	10
  1281  044D  00F0               	movwf	___awdiv@divisor
  1282  044E  3000               	movlw	0
  1283  044F  00F1               	movwf	___awdiv@divisor+1
  1284  0450  085B               	movf	hienthiled@nhietdo+1,w
  1285  0451  00F3               	movwf	___awdiv@dividend+1
  1286  0452  085A               	movf	hienthiled@nhietdo,w
  1287  0453  00F2               	movwf	___awdiv@dividend
  1288  0454  120A  118A  2159  120A  118A  	fcall	___awdiv
  1289  0459  0871               	movf	?___awdiv+1,w
  1290  045A  1283               	bcf	3,5	;RP0=0, select bank0
  1291  045B  1303               	bcf	3,6	;RP1=0, select bank0
  1292  045C  00DB               	movwf	hienthiled@nhietdo+1
  1293  045D  0870               	movf	?___awdiv,w
  1294  045E  00DA               	movwf	hienthiled@nhietdo
  1295  045F  2C10               	goto	l1578
  1296  0460                     l1580:	
  1297                           
  1298                           ;VXL_main.c: 94: }
  1299                           ;VXL_main.c: 95: PORTB = bcdnhietdo;
  1300  0460  1283               	bcf	3,5	;RP0=0, select bank0
  1301  0461  1303               	bcf	3,6	;RP1=0, select bank0
  1302  0462  0856               	movf	hienthiled@bcdnhietdo,w
  1303  0463  0086               	movwf	6	;volatile
  1304  0464  0008               	return
  1305  0465                     __end_of_hienthiled:	
  1306                           
  1307                           	psect	text3
  1308  0FC7                     __ptext3:	
  1309 ;; *************** function ___lbtoft *****************
  1310 ;; Defined at:
  1311 ;;		line 27 in file "D:\HardwareDesign\Microchip\xc8\v1.45\sources\common\lbtoft.c"
  1312 ;; Parameters:    Size  Location     Type
  1313 ;;  c               1    wreg     unsigned char 
  1314 ;; Auto vars:     Size  Location     Type
  1315 ;;  c               1   11[COMMON] unsigned char 
  1316 ;; Return value:  Size  Location     Type
  1317 ;;                  3    8[COMMON] float 
  1318 ;; Registers used:
  1319 ;;		wreg, status,2, status,0, pclath, cstack
  1320 ;; Tracked objects:
  1321 ;;		On entry : 0/0
  1322 ;;		On exit  : 0/0
  1323 ;;		Unchanged: 0/0
  1324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1325 ;;      Params:         3       0       0       0       0
  1326 ;;      Locals:         1       0       0       0       0
  1327 ;;      Temps:          0       4       0       0       0
  1328 ;;      Totals:         4       4       0       0       0
  1329 ;;Total ram usage:        8 bytes
  1330 ;; Hardware stack levels used:    1
  1331 ;; Hardware stack levels required when called:    1
  1332 ;; This function calls:
  1333 ;;		___ftpack
  1334 ;; This function is called by:
  1335 ;;		_hienthiled
  1336 ;; This function uses a non-reentrant model
  1337 ;;
  1338                           
  1339                           
  1340                           ;psect for function ___lbtoft
  1341  0FC7                     ___lbtoft:	
  1342                           
  1343                           ;incstack = 0
  1344                           ; Regs used in ___lbtoft: [wreg+status,2+status,0+pclath+cstack]
  1345                           ;___lbtoft@c stored from wreg
  1346  0FC7  00FB               	movwf	___lbtoft@c
  1347  0FC8  087B               	movf	___lbtoft@c,w
  1348  0FC9  1283               	bcf	3,5	;RP0=0, select bank0
  1349  0FCA  1303               	bcf	3,6	;RP1=0, select bank0
  1350  0FCB  00A0               	movwf	??___lbtoft
  1351  0FCC  01A1               	clrf	??___lbtoft+1
  1352  0FCD  01A2               	clrf	??___lbtoft+2
  1353  0FCE  0820               	movf	??___lbtoft,w
  1354  0FCF  00F0               	movwf	___ftpack@arg
  1355  0FD0  0821               	movf	??___lbtoft+1,w
  1356  0FD1  00F1               	movwf	___ftpack@arg+1
  1357  0FD2  0822               	movf	??___lbtoft+2,w
  1358  0FD3  00F2               	movwf	___ftpack@arg+2
  1359  0FD4  308E               	movlw	142
  1360  0FD5  00A3               	movwf	??___lbtoft+3
  1361  0FD6  0823               	movf	??___lbtoft+3,w
  1362  0FD7  00F3               	movwf	___ftpack@exp
  1363  0FD8  01F4               	clrf	___ftpack@sign
  1364  0FD9  120A  118A  21B2   	fcall	___ftpack
  1365  0FDC  0870               	movf	?___ftpack,w
  1366  0FDD  00F8               	movwf	?___lbtoft
  1367  0FDE  0871               	movf	?___ftpack+1,w
  1368  0FDF  00F9               	movwf	?___lbtoft+1
  1369  0FE0  0872               	movf	?___ftpack+2,w
  1370  0FE1  00FA               	movwf	?___lbtoft+2
  1371  0FE2  0008               	return
  1372  0FE3                     __end_of___lbtoft:	
  1373                           
  1374                           	psect	text4
  1375  02A5                     __ptext4:	
  1376 ;; *************** function ___fttol *****************
  1377 ;; Defined at:
  1378 ;;		line 44 in file "D:\HardwareDesign\Microchip\xc8\v1.45\sources\common\fttol.c"
  1379 ;; Parameters:    Size  Location     Type
  1380 ;;  f1              3   36[BANK0 ] float 
  1381 ;; Auto vars:     Size  Location     Type
  1382 ;;  lval            4   45[BANK0 ] unsigned long 
  1383 ;;  exp1            1   49[BANK0 ] unsigned char 
  1384 ;;  sign1           1   44[BANK0 ] unsigned char 
  1385 ;; Return value:  Size  Location     Type
  1386 ;;                  4   36[BANK0 ] long 
  1387 ;; Registers used:
  1388 ;;		wreg, status,2, status,0
  1389 ;; Tracked objects:
  1390 ;;		On entry : 0/0
  1391 ;;		On exit  : 0/0
  1392 ;;		Unchanged: 0/0
  1393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1394 ;;      Params:         0       4       0       0       0
  1395 ;;      Locals:         0       6       0       0       0
  1396 ;;      Temps:          0       4       0       0       0
  1397 ;;      Totals:         0      14       0       0       0
  1398 ;;Total ram usage:       14 bytes
  1399 ;; Hardware stack levels used:    1
  1400 ;; This function calls:
  1401 ;;		Nothing
  1402 ;; This function is called by:
  1403 ;;		_hienthiled
  1404 ;; This function uses a non-reentrant model
  1405 ;;
  1406                           
  1407                           
  1408                           ;psect for function ___fttol
  1409  02A5                     ___fttol:	
  1410                           
  1411                           ;incstack = 0
  1412                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  1413  02A5  1283               	bcf	3,5	;RP0=0, select bank0
  1414  02A6  1303               	bcf	3,6	;RP1=0, select bank0
  1415  02A7  0844               	movf	___fttol@f1,w
  1416  02A8  00C8               	movwf	??___fttol
  1417  02A9  0845               	movf	___fttol@f1+1,w
  1418  02AA  00C9               	movwf	??___fttol+1
  1419  02AB  0846               	movf	___fttol@f1+2,w
  1420  02AC  00CA               	movwf	??___fttol+2
  1421  02AD  1003               	clrc
  1422  02AE  0D49               	rlf	??___fttol+1,w
  1423  02AF  0D4A               	rlf	??___fttol+2,w
  1424  02B0  00CB               	movwf	??___fttol+3
  1425  02B1  084B               	movf	??___fttol+3,w
  1426  02B2  00D1               	movwf	___fttol@exp1
  1427  02B3  0851               	movf	___fttol@exp1,w
  1428  02B4  1D03               	btfss	3,2
  1429  02B5  2ABF               	goto	l1454
  1430  02B6  3000               	movlw	0
  1431  02B7  00C7               	movwf	?___fttol+3
  1432  02B8  3000               	movlw	0
  1433  02B9  00C6               	movwf	?___fttol+2
  1434  02BA  3000               	movlw	0
  1435  02BB  00C5               	movwf	?___fttol+1
  1436  02BC  3000               	movlw	0
  1437  02BD  00C4               	movwf	?___fttol
  1438  02BE  0008               	return
  1439  02BF                     l1454:	
  1440  02BF  0844               	movf	___fttol@f1,w
  1441  02C0  00C8               	movwf	??___fttol
  1442  02C1  0845               	movf	___fttol@f1+1,w
  1443  02C2  00C9               	movwf	??___fttol+1
  1444  02C3  0846               	movf	___fttol@f1+2,w
  1445  02C4  00CA               	movwf	??___fttol+2
  1446  02C5  3017               	movlw	23
  1447  02C6                     u1745:	
  1448  02C6  1003               	clrc
  1449  02C7  0CCA               	rrf	??___fttol+2,f
  1450  02C8  0CC9               	rrf	??___fttol+1,f
  1451  02C9  0CC8               	rrf	??___fttol,f
  1452  02CA  3EFF               	addlw	-1
  1453  02CB  1D03               	skipz
  1454  02CC  2AC6               	goto	u1745
  1455  02CD  0848               	movf	??___fttol,w
  1456  02CE  00CB               	movwf	??___fttol+3
  1457  02CF  084B               	movf	??___fttol+3,w
  1458  02D0  00CC               	movwf	___fttol@sign1
  1459  02D1  17C5               	bsf	___fttol@f1+1,7
  1460  02D2  30FF               	movlw	255
  1461  02D3  05C4               	andwf	___fttol@f1,f
  1462  02D4  30FF               	movlw	255
  1463  02D5  05C5               	andwf	___fttol@f1+1,f
  1464  02D6  3000               	movlw	0
  1465  02D7  05C6               	andwf	___fttol@f1+2,f
  1466  02D8  0844               	movf	___fttol@f1,w
  1467  02D9  00CD               	movwf	___fttol@lval
  1468  02DA  0845               	movf	___fttol@f1+1,w
  1469  02DB  00CE               	movwf	___fttol@lval+1
  1470  02DC  0846               	movf	___fttol@f1+2,w
  1471  02DD  00CF               	movwf	___fttol@lval+2
  1472  02DE  01D0               	clrf	___fttol@lval+3
  1473  02DF  308E               	movlw	142
  1474  02E0  02D1               	subwf	___fttol@exp1,f
  1475  02E1  1FD1               	btfss	___fttol@exp1,7
  1476  02E2  2B01               	goto	l1474
  1477  02E3  0851               	movf	___fttol@exp1,w
  1478  02E4  3A80               	xorlw	128
  1479  02E5  3E8F               	addlw	143
  1480  02E6  1803               	skipnc
  1481  02E7  2AF1               	goto	l1472
  1482  02E8  3000               	movlw	0
  1483  02E9  00C7               	movwf	?___fttol+3
  1484  02EA  3000               	movlw	0
  1485  02EB  00C6               	movwf	?___fttol+2
  1486  02EC  3000               	movlw	0
  1487  02ED  00C5               	movwf	?___fttol+1
  1488  02EE  3000               	movlw	0
  1489  02EF  00C4               	movwf	?___fttol
  1490  02F0  0008               	return
  1491  02F1                     l1472:	
  1492  02F1  3001               	movlw	1
  1493  02F2                     u1775:	
  1494  02F2  1003               	clrc
  1495  02F3  0CD0               	rrf	___fttol@lval+3,f
  1496  02F4  0CCF               	rrf	___fttol@lval+2,f
  1497  02F5  0CCE               	rrf	___fttol@lval+1,f
  1498  02F6  0CCD               	rrf	___fttol@lval,f
  1499  02F7  3EFF               	addlw	-1
  1500  02F8  1D03               	skipz
  1501  02F9  2AF2               	goto	u1775
  1502  02FA  3001               	movlw	1
  1503  02FB  00C8               	movwf	??___fttol
  1504  02FC  0848               	movf	??___fttol,w
  1505  02FD  07D1               	addwf	___fttol@exp1,f
  1506  02FE  1903               	btfsc	3,2
  1507  02FF  2B1C               	goto	l1482
  1508  0300  2AF1               	goto	l1472
  1509  0301                     l1474:	
  1510  0301  3018               	movlw	24
  1511  0302  0251               	subwf	___fttol@exp1,w
  1512  0303  1C03               	skipc
  1513  0304  2B19               	goto	l484
  1514  0305  3000               	movlw	0
  1515  0306  00C7               	movwf	?___fttol+3
  1516  0307  3000               	movlw	0
  1517  0308  00C6               	movwf	?___fttol+2
  1518  0309  3000               	movlw	0
  1519  030A  00C5               	movwf	?___fttol+1
  1520  030B  3000               	movlw	0
  1521  030C  00C4               	movwf	?___fttol
  1522  030D  0008               	return
  1523  030E                     l1480:	
  1524  030E  3001               	movlw	1
  1525  030F  00C8               	movwf	??___fttol
  1526  0310                     u1805:	
  1527  0310  1003               	clrc
  1528  0311  0DCD               	rlf	___fttol@lval,f
  1529  0312  0DCE               	rlf	___fttol@lval+1,f
  1530  0313  0DCF               	rlf	___fttol@lval+2,f
  1531  0314  0DD0               	rlf	___fttol@lval+3,f
  1532  0315  0BC8               	decfsz	??___fttol,f
  1533  0316  2B10               	goto	u1805
  1534  0317  3001               	movlw	1
  1535  0318  02D1               	subwf	___fttol@exp1,f
  1536  0319                     l484:	
  1537  0319  0851               	movf	___fttol@exp1,w
  1538  031A  1D03               	btfss	3,2
  1539  031B  2B0E               	goto	l1480
  1540  031C                     l1482:	
  1541  031C  084C               	movf	___fttol@sign1,w
  1542  031D  1903               	btfsc	3,2
  1543  031E  2B2A               	goto	l1486
  1544  031F  09CD               	comf	___fttol@lval,f
  1545  0320  09CE               	comf	___fttol@lval+1,f
  1546  0321  09CF               	comf	___fttol@lval+2,f
  1547  0322  09D0               	comf	___fttol@lval+3,f
  1548  0323  0ACD               	incf	___fttol@lval,f
  1549  0324  1903               	skipnz
  1550  0325  0ACE               	incf	___fttol@lval+1,f
  1551  0326  1903               	skipnz
  1552  0327  0ACF               	incf	___fttol@lval+2,f
  1553  0328  1903               	skipnz
  1554  0329  0AD0               	incf	___fttol@lval+3,f
  1555  032A                     l1486:	
  1556  032A  0850               	movf	___fttol@lval+3,w
  1557  032B  00C7               	movwf	?___fttol+3
  1558  032C  084F               	movf	___fttol@lval+2,w
  1559  032D  00C6               	movwf	?___fttol+2
  1560  032E  084E               	movf	___fttol@lval+1,w
  1561  032F  00C5               	movwf	?___fttol+1
  1562  0330  084D               	movf	___fttol@lval,w
  1563  0331  00C4               	movwf	?___fttol
  1564  0332  0008               	return
  1565  0333                     __end_of___fttol:	
  1566                           
  1567                           	psect	text5
  1568  051D                     __ptext5:	
  1569 ;; *************** function ___ftmul *****************
  1570 ;; Defined at:
  1571 ;;		line 62 in file "D:\HardwareDesign\Microchip\xc8\v1.45\sources\common\ftmul.c"
  1572 ;; Parameters:    Size  Location     Type
  1573 ;;  f1              3    4[BANK0 ] float 
  1574 ;;  f2              3    7[BANK0 ] float 
  1575 ;; Auto vars:     Size  Location     Type
  1576 ;;  f3_as_produc    3   15[BANK0 ] unsigned um
  1577 ;;  sign            1   19[BANK0 ] unsigned char 
  1578 ;;  cntr            1   18[BANK0 ] unsigned char 
  1579 ;;  exp             1   14[BANK0 ] unsigned char 
  1580 ;; Return value:  Size  Location     Type
  1581 ;;                  3    4[BANK0 ] float 
  1582 ;; Registers used:
  1583 ;;		wreg, status,2, status,0, pclath, cstack
  1584 ;; Tracked objects:
  1585 ;;		On entry : 0/0
  1586 ;;		On exit  : 0/0
  1587 ;;		Unchanged: 0/0
  1588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1589 ;;      Params:         0       6       0       0       0
  1590 ;;      Locals:         0       6       0       0       0
  1591 ;;      Temps:          0       4       0       0       0
  1592 ;;      Totals:         0      16       0       0       0
  1593 ;;Total ram usage:       16 bytes
  1594 ;; Hardware stack levels used:    1
  1595 ;; Hardware stack levels required when called:    1
  1596 ;; This function calls:
  1597 ;;		___ftpack
  1598 ;; This function is called by:
  1599 ;;		_hienthiled
  1600 ;; This function uses a non-reentrant model
  1601 ;;
  1602                           
  1603                           
  1604                           ;psect for function ___ftmul
  1605  051D                     ___ftmul:	
  1606                           
  1607                           ;incstack = 0
  1608                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  1609  051D  1283               	bcf	3,5	;RP0=0, select bank0
  1610  051E  1303               	bcf	3,6	;RP1=0, select bank0
  1611  051F  0824               	movf	___ftmul@f1,w
  1612  0520  00AA               	movwf	??___ftmul
  1613  0521  0825               	movf	___ftmul@f1+1,w
  1614  0522  00AB               	movwf	??___ftmul+1
  1615  0523  0826               	movf	___ftmul@f1+2,w
  1616  0524  00AC               	movwf	??___ftmul+2
  1617  0525  1003               	clrc
  1618  0526  0D2B               	rlf	??___ftmul+1,w
  1619  0527  0D2C               	rlf	??___ftmul+2,w
  1620  0528  00AD               	movwf	??___ftmul+3
  1621  0529  082D               	movf	??___ftmul+3,w
  1622  052A  00AE               	movwf	___ftmul@exp
  1623  052B  082E               	movf	___ftmul@exp,w
  1624  052C  1D03               	btfss	3,2
  1625  052D  2D35               	goto	l1404
  1626  052E  3000               	movlw	0
  1627  052F  00A4               	movwf	?___ftmul
  1628  0530  3000               	movlw	0
  1629  0531  00A5               	movwf	?___ftmul+1
  1630  0532  3000               	movlw	0
  1631  0533  00A6               	movwf	?___ftmul+2
  1632  0534  0008               	return
  1633  0535                     l1404:	
  1634  0535  0827               	movf	___ftmul@f2,w
  1635  0536  00AA               	movwf	??___ftmul
  1636  0537  0828               	movf	___ftmul@f2+1,w
  1637  0538  00AB               	movwf	??___ftmul+1
  1638  0539  0829               	movf	___ftmul@f2+2,w
  1639  053A  00AC               	movwf	??___ftmul+2
  1640  053B  1003               	clrc
  1641  053C  0D2B               	rlf	??___ftmul+1,w
  1642  053D  0D2C               	rlf	??___ftmul+2,w
  1643  053E  00AD               	movwf	??___ftmul+3
  1644  053F  082D               	movf	??___ftmul+3,w
  1645  0540  00B3               	movwf	___ftmul@sign
  1646  0541  0833               	movf	___ftmul@sign,w
  1647  0542  1D03               	btfss	3,2
  1648  0543  2D4B               	goto	l1410
  1649  0544  3000               	movlw	0
  1650  0545  00A4               	movwf	?___ftmul
  1651  0546  3000               	movlw	0
  1652  0547  00A5               	movwf	?___ftmul+1
  1653  0548  3000               	movlw	0
  1654  0549  00A6               	movwf	?___ftmul+2
  1655  054A  0008               	return
  1656  054B                     l1410:	
  1657  054B  0833               	movf	___ftmul@sign,w
  1658  054C  3E7B               	addlw	123
  1659  054D  00AA               	movwf	??___ftmul
  1660  054E  082A               	movf	??___ftmul,w
  1661  054F  07AE               	addwf	___ftmul@exp,f
  1662  0550  0824               	movf	___ftmul@f1,w
  1663  0551  00AA               	movwf	??___ftmul
  1664  0552  0825               	movf	___ftmul@f1+1,w
  1665  0553  00AB               	movwf	??___ftmul+1
  1666  0554  0826               	movf	___ftmul@f1+2,w
  1667  0555  00AC               	movwf	??___ftmul+2
  1668  0556  3010               	movlw	16
  1669  0557                     u1615:	
  1670  0557  1003               	clrc
  1671  0558  0CAC               	rrf	??___ftmul+2,f
  1672  0559  0CAB               	rrf	??___ftmul+1,f
  1673  055A  0CAA               	rrf	??___ftmul,f
  1674  055B  3EFF               	addlw	-1
  1675  055C  1D03               	skipz
  1676  055D  2D57               	goto	u1615
  1677  055E  082A               	movf	??___ftmul,w
  1678  055F  00AD               	movwf	??___ftmul+3
  1679  0560  082D               	movf	??___ftmul+3,w
  1680  0561  00B3               	movwf	___ftmul@sign
  1681  0562  0827               	movf	___ftmul@f2,w
  1682  0563  00AA               	movwf	??___ftmul
  1683  0564  0828               	movf	___ftmul@f2+1,w
  1684  0565  00AB               	movwf	??___ftmul+1
  1685  0566  0829               	movf	___ftmul@f2+2,w
  1686  0567  00AC               	movwf	??___ftmul+2
  1687  0568  3010               	movlw	16
  1688  0569                     u1625:	
  1689  0569  1003               	clrc
  1690  056A  0CAC               	rrf	??___ftmul+2,f
  1691  056B  0CAB               	rrf	??___ftmul+1,f
  1692  056C  0CAA               	rrf	??___ftmul,f
  1693  056D  3EFF               	addlw	-1
  1694  056E  1D03               	skipz
  1695  056F  2D69               	goto	u1625
  1696  0570  082A               	movf	??___ftmul,w
  1697  0571  00AD               	movwf	??___ftmul+3
  1698  0572  082D               	movf	??___ftmul+3,w
  1699  0573  06B3               	xorwf	___ftmul@sign,f
  1700  0574  3080               	movlw	128
  1701  0575  00AA               	movwf	??___ftmul
  1702  0576  082A               	movf	??___ftmul,w
  1703  0577  05B3               	andwf	___ftmul@sign,f
  1704  0578  17A5               	bsf	___ftmul@f1+1,7
  1705  0579  17A8               	bsf	___ftmul@f2+1,7
  1706  057A  30FF               	movlw	255
  1707  057B  05A7               	andwf	___ftmul@f2,f
  1708  057C  30FF               	movlw	255
  1709  057D  05A8               	andwf	___ftmul@f2+1,f
  1710  057E  3000               	movlw	0
  1711  057F  05A9               	andwf	___ftmul@f2+2,f
  1712  0580  3000               	movlw	0
  1713  0581  00AF               	movwf	___ftmul@f3_as_product
  1714  0582  3000               	movlw	0
  1715  0583  00B0               	movwf	___ftmul@f3_as_product+1
  1716  0584  3000               	movlw	0
  1717  0585  00B1               	movwf	___ftmul@f3_as_product+2
  1718  0586  3007               	movlw	7
  1719  0587  00AA               	movwf	??___ftmul
  1720  0588  082A               	movf	??___ftmul,w
  1721  0589  00B2               	movwf	___ftmul@cntr
  1722  058A                     l1422:	
  1723  058A  1C24               	btfss	___ftmul@f1,0
  1724  058B  2D9A               	goto	l1426
  1725  058C  0827               	movf	___ftmul@f2,w
  1726  058D  07AF               	addwf	___ftmul@f3_as_product,f
  1727  058E  0828               	movf	___ftmul@f2+1,w
  1728  058F  1103               	clrz
  1729  0590  1803               	skipnc
  1730  0591  0A28               	incf	___ftmul@f2+1,w
  1731  0592  1D03               	btfss	3,2
  1732  0593  07B0               	addwf	___ftmul@f3_as_product+1,f
  1733  0594  0829               	movf	___ftmul@f2+2,w
  1734  0595  1103               	clrz
  1735  0596  1803               	skipnc
  1736  0597  0A29               	incf	___ftmul@f2+2,w
  1737  0598  1D03               	btfss	3,2
  1738  0599  07B1               	addwf	___ftmul@f3_as_product+2,f
  1739  059A                     l1426:	
  1740  059A  3001               	movlw	1
  1741  059B                     u1655:	
  1742  059B  1003               	clrc
  1743  059C  0CA6               	rrf	___ftmul@f1+2,f
  1744  059D  0CA5               	rrf	___ftmul@f1+1,f
  1745  059E  0CA4               	rrf	___ftmul@f1,f
  1746  059F  3EFF               	addlw	-1
  1747  05A0  1D03               	skipz
  1748  05A1  2D9B               	goto	u1655
  1749  05A2  3001               	movlw	1
  1750  05A3                     u1665:	
  1751  05A3  1003               	clrc
  1752  05A4  0DA7               	rlf	___ftmul@f2,f
  1753  05A5  0DA8               	rlf	___ftmul@f2+1,f
  1754  05A6  0DA9               	rlf	___ftmul@f2+2,f
  1755  05A7  3EFF               	addlw	-1
  1756  05A8  1D03               	skipz
  1757  05A9  2DA3               	goto	u1665
  1758  05AA  3001               	movlw	1
  1759  05AB  02B2               	subwf	___ftmul@cntr,f
  1760  05AC  1D03               	btfss	3,2
  1761  05AD  2D8A               	goto	l1422
  1762  05AE  3009               	movlw	9
  1763  05AF  00AA               	movwf	??___ftmul
  1764  05B0  082A               	movf	??___ftmul,w
  1765  05B1  00B2               	movwf	___ftmul@cntr
  1766  05B2                     l1434:	
  1767  05B2  1C24               	btfss	___ftmul@f1,0
  1768  05B3  2DC2               	goto	l1438
  1769  05B4  0827               	movf	___ftmul@f2,w
  1770  05B5  07AF               	addwf	___ftmul@f3_as_product,f
  1771  05B6  0828               	movf	___ftmul@f2+1,w
  1772  05B7  1103               	clrz
  1773  05B8  1803               	skipnc
  1774  05B9  0A28               	incf	___ftmul@f2+1,w
  1775  05BA  1D03               	btfss	3,2
  1776  05BB  07B0               	addwf	___ftmul@f3_as_product+1,f
  1777  05BC  0829               	movf	___ftmul@f2+2,w
  1778  05BD  1103               	clrz
  1779  05BE  1803               	skipnc
  1780  05BF  0A29               	incf	___ftmul@f2+2,w
  1781  05C0  1D03               	btfss	3,2
  1782  05C1  07B1               	addwf	___ftmul@f3_as_product+2,f
  1783  05C2                     l1438:	
  1784  05C2  3001               	movlw	1
  1785  05C3                     u1705:	
  1786  05C3  1003               	clrc
  1787  05C4  0CA6               	rrf	___ftmul@f1+2,f
  1788  05C5  0CA5               	rrf	___ftmul@f1+1,f
  1789  05C6  0CA4               	rrf	___ftmul@f1,f
  1790  05C7  3EFF               	addlw	-1
  1791  05C8  1D03               	skipz
  1792  05C9  2DC3               	goto	u1705
  1793  05CA  3001               	movlw	1
  1794  05CB                     u1715:	
  1795  05CB  1003               	clrc
  1796  05CC  0CB1               	rrf	___ftmul@f3_as_product+2,f
  1797  05CD  0CB0               	rrf	___ftmul@f3_as_product+1,f
  1798  05CE  0CAF               	rrf	___ftmul@f3_as_product,f
  1799  05CF  3EFF               	addlw	-1
  1800  05D0  1D03               	skipz
  1801  05D1  2DCB               	goto	u1715
  1802  05D2  3001               	movlw	1
  1803  05D3  02B2               	subwf	___ftmul@cntr,f
  1804  05D4  1D03               	btfss	3,2
  1805  05D5  2DB2               	goto	l1434
  1806  05D6  082F               	movf	___ftmul@f3_as_product,w
  1807  05D7  00F0               	movwf	___ftpack@arg
  1808  05D8  0830               	movf	___ftmul@f3_as_product+1,w
  1809  05D9  00F1               	movwf	___ftpack@arg+1
  1810  05DA  0831               	movf	___ftmul@f3_as_product+2,w
  1811  05DB  00F2               	movwf	___ftpack@arg+2
  1812  05DC  082E               	movf	___ftmul@exp,w
  1813  05DD  00AA               	movwf	??___ftmul
  1814  05DE  082A               	movf	??___ftmul,w
  1815  05DF  00F3               	movwf	___ftpack@exp
  1816  05E0  0833               	movf	___ftmul@sign,w
  1817  05E1  00AB               	movwf	??___ftmul+1
  1818  05E2  082B               	movf	??___ftmul+1,w
  1819  05E3  00F4               	movwf	___ftpack@sign
  1820  05E4  120A  118A  21B2   	fcall	___ftpack
  1821  05E7  0870               	movf	?___ftpack,w
  1822  05E8  1283               	bcf	3,5	;RP0=0, select bank0
  1823  05E9  1303               	bcf	3,6	;RP1=0, select bank0
  1824  05EA  00A4               	movwf	?___ftmul
  1825  05EB  0871               	movf	?___ftpack+1,w
  1826  05EC  00A5               	movwf	?___ftmul+1
  1827  05ED  0872               	movf	?___ftpack+2,w
  1828  05EE  00A6               	movwf	?___ftmul+2
  1829  05EF  0008               	return
  1830  05F0                     __end_of___ftmul:	
  1831                           
  1832                           	psect	text6
  1833  0465                     __ptext6:	
  1834 ;; *************** function ___ftdiv *****************
  1835 ;; Defined at:
  1836 ;;		line 56 in file "D:\HardwareDesign\Microchip\xc8\v1.45\sources\common\ftdiv.c"
  1837 ;; Parameters:    Size  Location     Type
  1838 ;;  f2              3   20[BANK0 ] float 
  1839 ;;  f1              3   23[BANK0 ] float 
  1840 ;; Auto vars:     Size  Location     Type
  1841 ;;  f3              3   31[BANK0 ] float 
  1842 ;;  sign            1   35[BANK0 ] unsigned char 
  1843 ;;  exp             1   34[BANK0 ] unsigned char 
  1844 ;;  cntr            1   30[BANK0 ] unsigned char 
  1845 ;; Return value:  Size  Location     Type
  1846 ;;                  3   20[BANK0 ] float 
  1847 ;; Registers used:
  1848 ;;		wreg, status,2, status,0, pclath, cstack
  1849 ;; Tracked objects:
  1850 ;;		On entry : 0/0
  1851 ;;		On exit  : 0/0
  1852 ;;		Unchanged: 0/0
  1853 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1854 ;;      Params:         0       6       0       0       0
  1855 ;;      Locals:         0       6       0       0       0
  1856 ;;      Temps:          0       4       0       0       0
  1857 ;;      Totals:         0      16       0       0       0
  1858 ;;Total ram usage:       16 bytes
  1859 ;; Hardware stack levels used:    1
  1860 ;; Hardware stack levels required when called:    1
  1861 ;; This function calls:
  1862 ;;		___ftpack
  1863 ;; This function is called by:
  1864 ;;		_hienthiled
  1865 ;; This function uses a non-reentrant model
  1866 ;;
  1867                           
  1868                           
  1869                           ;psect for function ___ftdiv
  1870  0465                     ___ftdiv:	
  1871                           
  1872                           ;incstack = 0
  1873                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  1874  0465  1283               	bcf	3,5	;RP0=0, select bank0
  1875  0466  1303               	bcf	3,6	;RP1=0, select bank0
  1876  0467  0837               	movf	___ftdiv@f1,w
  1877  0468  00BA               	movwf	??___ftdiv
  1878  0469  0838               	movf	___ftdiv@f1+1,w
  1879  046A  00BB               	movwf	??___ftdiv+1
  1880  046B  0839               	movf	___ftdiv@f1+2,w
  1881  046C  00BC               	movwf	??___ftdiv+2
  1882  046D  1003               	clrc
  1883  046E  0D3B               	rlf	??___ftdiv+1,w
  1884  046F  0D3C               	rlf	??___ftdiv+2,w
  1885  0470  00BD               	movwf	??___ftdiv+3
  1886  0471  083D               	movf	??___ftdiv+3,w
  1887  0472  00C2               	movwf	___ftdiv@exp
  1888  0473  0842               	movf	___ftdiv@exp,w
  1889  0474  1D03               	btfss	3,2
  1890  0475  2C7D               	goto	l1362
  1891  0476  3000               	movlw	0
  1892  0477  00B4               	movwf	?___ftdiv
  1893  0478  3000               	movlw	0
  1894  0479  00B5               	movwf	?___ftdiv+1
  1895  047A  3000               	movlw	0
  1896  047B  00B6               	movwf	?___ftdiv+2
  1897  047C  0008               	return
  1898  047D                     l1362:	
  1899  047D  0834               	movf	___ftdiv@f2,w
  1900  047E  00BA               	movwf	??___ftdiv
  1901  047F  0835               	movf	___ftdiv@f2+1,w
  1902  0480  00BB               	movwf	??___ftdiv+1
  1903  0481  0836               	movf	___ftdiv@f2+2,w
  1904  0482  00BC               	movwf	??___ftdiv+2
  1905  0483  1003               	clrc
  1906  0484  0D3B               	rlf	??___ftdiv+1,w
  1907  0485  0D3C               	rlf	??___ftdiv+2,w
  1908  0486  00BD               	movwf	??___ftdiv+3
  1909  0487  083D               	movf	??___ftdiv+3,w
  1910  0488  00C3               	movwf	___ftdiv@sign
  1911  0489  0843               	movf	___ftdiv@sign,w
  1912  048A  1D03               	btfss	3,2
  1913  048B  2C93               	goto	l1368
  1914  048C  3000               	movlw	0
  1915  048D  00B4               	movwf	?___ftdiv
  1916  048E  3000               	movlw	0
  1917  048F  00B5               	movwf	?___ftdiv+1
  1918  0490  3000               	movlw	0
  1919  0491  00B6               	movwf	?___ftdiv+2
  1920  0492  0008               	return
  1921  0493                     l1368:	
  1922  0493  3000               	movlw	0
  1923  0494  00BF               	movwf	___ftdiv@f3
  1924  0495  3000               	movlw	0
  1925  0496  00C0               	movwf	___ftdiv@f3+1
  1926  0497  3000               	movlw	0
  1927  0498  00C1               	movwf	___ftdiv@f3+2
  1928  0499  3089               	movlw	137
  1929  049A  0743               	addwf	___ftdiv@sign,w
  1930  049B  00BA               	movwf	??___ftdiv
  1931  049C  083A               	movf	??___ftdiv,w
  1932  049D  02C2               	subwf	___ftdiv@exp,f
  1933  049E  0837               	movf	___ftdiv@f1,w
  1934  049F  00BA               	movwf	??___ftdiv
  1935  04A0  0838               	movf	___ftdiv@f1+1,w
  1936  04A1  00BB               	movwf	??___ftdiv+1
  1937  04A2  0839               	movf	___ftdiv@f1+2,w
  1938  04A3  00BC               	movwf	??___ftdiv+2
  1939  04A4  3010               	movlw	16
  1940  04A5                     u1535:	
  1941  04A5  1003               	clrc
  1942  04A6  0CBC               	rrf	??___ftdiv+2,f
  1943  04A7  0CBB               	rrf	??___ftdiv+1,f
  1944  04A8  0CBA               	rrf	??___ftdiv,f
  1945  04A9  3EFF               	addlw	-1
  1946  04AA  1D03               	skipz
  1947  04AB  2CA5               	goto	u1535
  1948  04AC  083A               	movf	??___ftdiv,w
  1949  04AD  00BD               	movwf	??___ftdiv+3
  1950  04AE  083D               	movf	??___ftdiv+3,w
  1951  04AF  00C3               	movwf	___ftdiv@sign
  1952  04B0  0834               	movf	___ftdiv@f2,w
  1953  04B1  00BA               	movwf	??___ftdiv
  1954  04B2  0835               	movf	___ftdiv@f2+1,w
  1955  04B3  00BB               	movwf	??___ftdiv+1
  1956  04B4  0836               	movf	___ftdiv@f2+2,w
  1957  04B5  00BC               	movwf	??___ftdiv+2
  1958  04B6  3010               	movlw	16
  1959  04B7                     u1545:	
  1960  04B7  1003               	clrc
  1961  04B8  0CBC               	rrf	??___ftdiv+2,f
  1962  04B9  0CBB               	rrf	??___ftdiv+1,f
  1963  04BA  0CBA               	rrf	??___ftdiv,f
  1964  04BB  3EFF               	addlw	-1
  1965  04BC  1D03               	skipz
  1966  04BD  2CB7               	goto	u1545
  1967  04BE  083A               	movf	??___ftdiv,w
  1968  04BF  00BD               	movwf	??___ftdiv+3
  1969  04C0  083D               	movf	??___ftdiv+3,w
  1970  04C1  06C3               	xorwf	___ftdiv@sign,f
  1971  04C2  3080               	movlw	128
  1972  04C3  00BA               	movwf	??___ftdiv
  1973  04C4  083A               	movf	??___ftdiv,w
  1974  04C5  05C3               	andwf	___ftdiv@sign,f
  1975  04C6  17B8               	bsf	___ftdiv@f1+1,7
  1976  04C7  30FF               	movlw	255
  1977  04C8  05B7               	andwf	___ftdiv@f1,f
  1978  04C9  30FF               	movlw	255
  1979  04CA  05B8               	andwf	___ftdiv@f1+1,f
  1980  04CB  3000               	movlw	0
  1981  04CC  05B9               	andwf	___ftdiv@f1+2,f
  1982  04CD  17B5               	bsf	___ftdiv@f2+1,7
  1983  04CE  30FF               	movlw	255
  1984  04CF  05B4               	andwf	___ftdiv@f2,f
  1985  04D0  30FF               	movlw	255
  1986  04D1  05B5               	andwf	___ftdiv@f2+1,f
  1987  04D2  3000               	movlw	0
  1988  04D3  05B6               	andwf	___ftdiv@f2+2,f
  1989  04D4  3018               	movlw	24
  1990  04D5  00BA               	movwf	??___ftdiv
  1991  04D6  083A               	movf	??___ftdiv,w
  1992  04D7  00BE               	movwf	___ftdiv@cntr
  1993  04D8                     l1382:	
  1994  04D8  3001               	movlw	1
  1995  04D9                     u1555:	
  1996  04D9  1003               	clrc
  1997  04DA  0DBF               	rlf	___ftdiv@f3,f
  1998  04DB  0DC0               	rlf	___ftdiv@f3+1,f
  1999  04DC  0DC1               	rlf	___ftdiv@f3+2,f
  2000  04DD  3EFF               	addlw	-1
  2001  04DE  1D03               	skipz
  2002  04DF  2CD9               	goto	u1555
  2003  04E0  0836               	movf	___ftdiv@f2+2,w
  2004  04E1  0239               	subwf	___ftdiv@f1+2,w
  2005  04E2  1D03               	skipz
  2006  04E3  2CEA               	goto	u1565
  2007  04E4  0835               	movf	___ftdiv@f2+1,w
  2008  04E5  0238               	subwf	___ftdiv@f1+1,w
  2009  04E6  1D03               	skipz
  2010  04E7  2CEA               	goto	u1565
  2011  04E8  0834               	movf	___ftdiv@f2,w
  2012  04E9  0237               	subwf	___ftdiv@f1,w
  2013  04EA                     u1565:	
  2014  04EA  1C03               	skipc
  2015  04EB  2CF7               	goto	l1390
  2016  04EC  0834               	movf	___ftdiv@f2,w
  2017  04ED  02B7               	subwf	___ftdiv@f1,f
  2018  04EE  0835               	movf	___ftdiv@f2+1,w
  2019  04EF  1C03               	skipc
  2020  04F0  0F35               	incfsz	___ftdiv@f2+1,w
  2021  04F1  02B8               	subwf	___ftdiv@f1+1,f
  2022  04F2  0836               	movf	___ftdiv@f2+2,w
  2023  04F3  1C03               	skipc
  2024  04F4  0A36               	incf	___ftdiv@f2+2,w
  2025  04F5  02B9               	subwf	___ftdiv@f1+2,f
  2026  04F6  143F               	bsf	___ftdiv@f3,0
  2027  04F7                     l1390:	
  2028  04F7  3001               	movlw	1
  2029  04F8                     u1575:	
  2030  04F8  1003               	clrc
  2031  04F9  0DB7               	rlf	___ftdiv@f1,f
  2032  04FA  0DB8               	rlf	___ftdiv@f1+1,f
  2033  04FB  0DB9               	rlf	___ftdiv@f1+2,f
  2034  04FC  3EFF               	addlw	-1
  2035  04FD  1D03               	skipz
  2036  04FE  2CF8               	goto	u1575
  2037  04FF  3001               	movlw	1
  2038  0500  02BE               	subwf	___ftdiv@cntr,f
  2039  0501  1D03               	btfss	3,2
  2040  0502  2CD8               	goto	l1382
  2041  0503  083F               	movf	___ftdiv@f3,w
  2042  0504  00F0               	movwf	___ftpack@arg
  2043  0505  0840               	movf	___ftdiv@f3+1,w
  2044  0506  00F1               	movwf	___ftpack@arg+1
  2045  0507  0841               	movf	___ftdiv@f3+2,w
  2046  0508  00F2               	movwf	___ftpack@arg+2
  2047  0509  0842               	movf	___ftdiv@exp,w
  2048  050A  00BA               	movwf	??___ftdiv
  2049  050B  083A               	movf	??___ftdiv,w
  2050  050C  00F3               	movwf	___ftpack@exp
  2051  050D  0843               	movf	___ftdiv@sign,w
  2052  050E  00BB               	movwf	??___ftdiv+1
  2053  050F  083B               	movf	??___ftdiv+1,w
  2054  0510  00F4               	movwf	___ftpack@sign
  2055  0511  120A  118A  21B2   	fcall	___ftpack
  2056  0514  0870               	movf	?___ftpack,w
  2057  0515  1283               	bcf	3,5	;RP0=0, select bank0
  2058  0516  1303               	bcf	3,6	;RP1=0, select bank0
  2059  0517  00B4               	movwf	?___ftdiv
  2060  0518  0871               	movf	?___ftpack+1,w
  2061  0519  00B5               	movwf	?___ftdiv+1
  2062  051A  0872               	movf	?___ftpack+2,w
  2063  051B  00B6               	movwf	?___ftdiv+2
  2064  051C  0008               	return
  2065  051D                     __end_of___ftdiv:	
  2066                           
  2067                           	psect	text7
  2068  01B2                     __ptext7:	
  2069 ;; *************** function ___ftpack *****************
  2070 ;; Defined at:
  2071 ;;		line 62 in file "D:\HardwareDesign\Microchip\xc8\v1.45\sources\common\float.c"
  2072 ;; Parameters:    Size  Location     Type
  2073 ;;  arg             3    0[COMMON] unsigned um
  2074 ;;  exp             1    3[COMMON] unsigned char 
  2075 ;;  sign            1    4[COMMON] unsigned char 
  2076 ;; Auto vars:     Size  Location     Type
  2077 ;;		None
  2078 ;; Return value:  Size  Location     Type
  2079 ;;                  3    0[COMMON] float 
  2080 ;; Registers used:
  2081 ;;		wreg, status,2, status,0
  2082 ;; Tracked objects:
  2083 ;;		On entry : 0/0
  2084 ;;		On exit  : 0/0
  2085 ;;		Unchanged: 0/0
  2086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2087 ;;      Params:         5       0       0       0       0
  2088 ;;      Locals:         0       0       0       0       0
  2089 ;;      Temps:          3       0       0       0       0
  2090 ;;      Totals:         8       0       0       0       0
  2091 ;;Total ram usage:        8 bytes
  2092 ;; Hardware stack levels used:    1
  2093 ;; This function calls:
  2094 ;;		Nothing
  2095 ;; This function is called by:
  2096 ;;		___ftdiv
  2097 ;;		___ftmul
  2098 ;;		___lbtoft
  2099 ;; This function uses a non-reentrant model
  2100 ;;
  2101                           
  2102                           
  2103                           ;psect for function ___ftpack
  2104  01B2                     ___ftpack:	
  2105                           
  2106                           ;incstack = 0
  2107                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  2108  01B2  0873               	movf	___ftpack@exp,w
  2109  01B3  1903               	btfsc	3,2
  2110  01B4  29BA               	goto	l1188
  2111  01B5  0872               	movf	___ftpack@arg+2,w
  2112  01B6  0471               	iorwf	___ftpack@arg+1,w
  2113  01B7  0470               	iorwf	___ftpack@arg,w
  2114  01B8  1D03               	skipz
  2115  01B9  29CD               	goto	l1194
  2116  01BA                     l1188:	
  2117  01BA  3000               	movlw	0
  2118  01BB  00F0               	movwf	?___ftpack
  2119  01BC  3000               	movlw	0
  2120  01BD  00F1               	movwf	?___ftpack+1
  2121  01BE  3000               	movlw	0
  2122  01BF  00F2               	movwf	?___ftpack+2
  2123  01C0  0008               	return
  2124  01C1                     l1192:	
  2125  01C1  3001               	movlw	1
  2126  01C2  00F5               	movwf	??___ftpack
  2127  01C3  0875               	movf	??___ftpack,w
  2128  01C4  07F3               	addwf	___ftpack@exp,f
  2129  01C5  3001               	movlw	1
  2130  01C6                     u1075:	
  2131  01C6  1003               	clrc
  2132  01C7  0CF2               	rrf	___ftpack@arg+2,f
  2133  01C8  0CF1               	rrf	___ftpack@arg+1,f
  2134  01C9  0CF0               	rrf	___ftpack@arg,f
  2135  01CA  3EFF               	addlw	-1
  2136  01CB  1D03               	skipz
  2137  01CC  29C6               	goto	u1075
  2138  01CD                     l1194:	
  2139  01CD  30FE               	movlw	254
  2140  01CE  0572               	andwf	___ftpack@arg+2,w
  2141  01CF  1903               	btfsc	3,2
  2142  01D0  29E8               	goto	l393
  2143  01D1  29C1               	goto	l1192
  2144  01D2                     l1196:	
  2145  01D2  3001               	movlw	1
  2146  01D3  00F5               	movwf	??___ftpack
  2147  01D4  0875               	movf	??___ftpack,w
  2148  01D5  07F3               	addwf	___ftpack@exp,f
  2149  01D6  3001               	movlw	1
  2150  01D7  07F0               	addwf	___ftpack@arg,f
  2151  01D8  3000               	movlw	0
  2152  01D9  1803               	skipnc
  2153  01DA  3001               	movlw	1
  2154  01DB  07F1               	addwf	___ftpack@arg+1,f
  2155  01DC  3000               	movlw	0
  2156  01DD  1803               	skipnc
  2157  01DE  3001               	movlw	1
  2158  01DF  07F2               	addwf	___ftpack@arg+2,f
  2159  01E0  3001               	movlw	1
  2160  01E1                     u1095:	
  2161  01E1  1003               	clrc
  2162  01E2  0CF2               	rrf	___ftpack@arg+2,f
  2163  01E3  0CF1               	rrf	___ftpack@arg+1,f
  2164  01E4  0CF0               	rrf	___ftpack@arg,f
  2165  01E5  3EFF               	addlw	-1
  2166  01E6  1D03               	skipz
  2167  01E7  29E1               	goto	u1095
  2168  01E8                     l393:	
  2169  01E8  30FF               	movlw	255
  2170  01E9  0572               	andwf	___ftpack@arg+2,w
  2171  01EA  1903               	btfsc	3,2
  2172  01EB  29F7               	goto	l1204
  2173  01EC  29D2               	goto	l1196
  2174  01ED                     l1202:	
  2175  01ED  3001               	movlw	1
  2176  01EE  02F3               	subwf	___ftpack@exp,f
  2177  01EF  3001               	movlw	1
  2178  01F0                     u1115:	
  2179  01F0  1003               	clrc
  2180  01F1  0DF0               	rlf	___ftpack@arg,f
  2181  01F2  0DF1               	rlf	___ftpack@arg+1,f
  2182  01F3  0DF2               	rlf	___ftpack@arg+2,f
  2183  01F4  3EFF               	addlw	-1
  2184  01F5  1D03               	skipz
  2185  01F6  29F0               	goto	u1115
  2186  01F7                     l1204:	
  2187  01F7  1BF1               	btfsc	___ftpack@arg+1,7
  2188  01F8  29FD               	goto	l400
  2189  01F9  3002               	movlw	2
  2190  01FA  0273               	subwf	___ftpack@exp,w
  2191  01FB  1803               	skipnc
  2192  01FC  29ED               	goto	l1202
  2193  01FD                     l400:	
  2194  01FD  1873               	btfsc	___ftpack@exp,0
  2195  01FE  2A05               	goto	l401
  2196  01FF  30FF               	movlw	255
  2197  0200  05F0               	andwf	___ftpack@arg,f
  2198  0201  307F               	movlw	127
  2199  0202  05F1               	andwf	___ftpack@arg+1,f
  2200  0203  30FF               	movlw	255
  2201  0204  05F2               	andwf	___ftpack@arg+2,f
  2202  0205                     l401:	
  2203  0205  1003               	clrc
  2204  0206  0CF3               	rrf	___ftpack@exp,f
  2205  0207  0873               	movf	___ftpack@exp,w
  2206  0208  00F5               	movwf	??___ftpack
  2207  0209  01F6               	clrf	??___ftpack+1
  2208  020A  01F7               	clrf	??___ftpack+2
  2209  020B  3010               	movlw	16
  2210  020C                     u1155:	
  2211  020C  1003               	clrc
  2212  020D  0DF5               	rlf	??___ftpack,f
  2213  020E  0DF6               	rlf	??___ftpack+1,f
  2214  020F  0DF7               	rlf	??___ftpack+2,f
  2215  0210  3EFF               	addlw	-1
  2216  0211  1D03               	skipz
  2217  0212  2A0C               	goto	u1155
  2218  0213  0875               	movf	??___ftpack,w
  2219  0214  04F0               	iorwf	___ftpack@arg,f
  2220  0215  0876               	movf	??___ftpack+1,w
  2221  0216  04F1               	iorwf	___ftpack@arg+1,f
  2222  0217  0877               	movf	??___ftpack+2,w
  2223  0218  04F2               	iorwf	___ftpack@arg+2,f
  2224  0219  0874               	movf	___ftpack@sign,w
  2225  021A  1903               	btfsc	3,2
  2226  021B  0008               	return
  2227  021C  17F2               	bsf	___ftpack@arg+2,7
  2228  021D  0008               	return
  2229  021E                     __end_of___ftpack:	
  2230                           
  2231                           	psect	text8
  2232  00B5                     __ptext8:	
  2233 ;; *************** function ___awmod *****************
  2234 ;; Defined at:
  2235 ;;		line 6 in file "D:\HardwareDesign\Microchip\xc8\v1.45\sources\common\awmod.c"
  2236 ;; Parameters:    Size  Location     Type
  2237 ;;  divisor         2    0[COMMON] int 
  2238 ;;  dividend        2    2[COMMON] int 
  2239 ;; Auto vars:     Size  Location     Type
  2240 ;;  sign            1    6[COMMON] unsigned char 
  2241 ;;  counter         1    5[COMMON] unsigned char 
  2242 ;; Return value:  Size  Location     Type
  2243 ;;                  2    0[COMMON] int 
  2244 ;; Registers used:
  2245 ;;		wreg, status,2, status,0
  2246 ;; Tracked objects:
  2247 ;;		On entry : 0/0
  2248 ;;		On exit  : 0/0
  2249 ;;		Unchanged: 0/0
  2250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2251 ;;      Params:         4       0       0       0       0
  2252 ;;      Locals:         2       0       0       0       0
  2253 ;;      Temps:          1       0       0       0       0
  2254 ;;      Totals:         7       0       0       0       0
  2255 ;;Total ram usage:        7 bytes
  2256 ;; Hardware stack levels used:    1
  2257 ;; This function calls:
  2258 ;;		Nothing
  2259 ;; This function is called by:
  2260 ;;		_hienthiled
  2261 ;;		_main
  2262 ;; This function uses a non-reentrant model
  2263 ;;
  2264                           
  2265                           
  2266                           ;psect for function ___awmod
  2267  00B5                     ___awmod:	
  2268                           
  2269                           ;incstack = 0
  2270                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  2271  00B5  01F6               	clrf	___awmod@sign
  2272  00B6  1FF3               	btfss	___awmod@dividend+1,7
  2273  00B7  28BF               	goto	l1326
  2274  00B8  09F2               	comf	___awmod@dividend,f
  2275  00B9  09F3               	comf	___awmod@dividend+1,f
  2276  00BA  0AF2               	incf	___awmod@dividend,f
  2277  00BB  1903               	skipnz
  2278  00BC  0AF3               	incf	___awmod@dividend+1,f
  2279  00BD  01F6               	clrf	___awmod@sign
  2280  00BE  0AF6               	incf	___awmod@sign,f
  2281  00BF                     l1326:	
  2282  00BF  1FF1               	btfss	___awmod@divisor+1,7
  2283  00C0  28C6               	goto	l1330
  2284  00C1  09F0               	comf	___awmod@divisor,f
  2285  00C2  09F1               	comf	___awmod@divisor+1,f
  2286  00C3  0AF0               	incf	___awmod@divisor,f
  2287  00C4  1903               	skipnz
  2288  00C5  0AF1               	incf	___awmod@divisor+1,f
  2289  00C6                     l1330:	
  2290  00C6  0870               	movf	___awmod@divisor,w
  2291  00C7  0471               	iorwf	___awmod@divisor+1,w
  2292  00C8  1903               	btfsc	3,2
  2293  00C9  28F3               	goto	l1348
  2294  00CA  01F5               	clrf	___awmod@counter
  2295  00CB  0AF5               	incf	___awmod@counter,f
  2296  00CC                     l1338:	
  2297  00CC  1BF1               	btfsc	___awmod@divisor+1,7
  2298  00CD  28DA               	goto	l1340
  2299  00CE  3001               	movlw	1
  2300  00CF                     u1455:	
  2301  00CF  1003               	clrc
  2302  00D0  0DF0               	rlf	___awmod@divisor,f
  2303  00D1  0DF1               	rlf	___awmod@divisor+1,f
  2304  00D2  3EFF               	addlw	-1
  2305  00D3  1D03               	skipz
  2306  00D4  28CF               	goto	u1455
  2307  00D5  3001               	movlw	1
  2308  00D6  00F4               	movwf	??___awmod
  2309  00D7  0874               	movf	??___awmod,w
  2310  00D8  07F5               	addwf	___awmod@counter,f
  2311  00D9  28CC               	goto	l1338
  2312  00DA                     l1340:	
  2313  00DA  0871               	movf	___awmod@divisor+1,w
  2314  00DB  0273               	subwf	___awmod@dividend+1,w
  2315  00DC  1D03               	skipz
  2316  00DD  28E0               	goto	u1475
  2317  00DE  0870               	movf	___awmod@divisor,w
  2318  00DF  0272               	subwf	___awmod@dividend,w
  2319  00E0                     u1475:	
  2320  00E0  1C03               	skipc
  2321  00E1  28E8               	goto	l1344
  2322  00E2  0870               	movf	___awmod@divisor,w
  2323  00E3  02F2               	subwf	___awmod@dividend,f
  2324  00E4  0871               	movf	___awmod@divisor+1,w
  2325  00E5  1C03               	skipc
  2326  00E6  03F3               	decf	___awmod@dividend+1,f
  2327  00E7  02F3               	subwf	___awmod@dividend+1,f
  2328  00E8                     l1344:	
  2329  00E8  3001               	movlw	1
  2330  00E9                     u1485:	
  2331  00E9  1003               	clrc
  2332  00EA  0CF1               	rrf	___awmod@divisor+1,f
  2333  00EB  0CF0               	rrf	___awmod@divisor,f
  2334  00EC  3EFF               	addlw	-1
  2335  00ED  1D03               	skipz
  2336  00EE  28E9               	goto	u1485
  2337  00EF  3001               	movlw	1
  2338  00F0  02F5               	subwf	___awmod@counter,f
  2339  00F1  1D03               	btfss	3,2
  2340  00F2  28DA               	goto	l1340
  2341  00F3                     l1348:	
  2342  00F3  0876               	movf	___awmod@sign,w
  2343  00F4  1903               	btfsc	3,2
  2344  00F5  28FB               	goto	l1352
  2345  00F6  09F2               	comf	___awmod@dividend,f
  2346  00F7  09F3               	comf	___awmod@dividend+1,f
  2347  00F8  0AF2               	incf	___awmod@dividend,f
  2348  00F9  1903               	skipnz
  2349  00FA  0AF3               	incf	___awmod@dividend+1,f
  2350  00FB                     l1352:	
  2351  00FB  0873               	movf	___awmod@dividend+1,w
  2352  00FC  00F1               	movwf	?___awmod+1
  2353  00FD  0872               	movf	___awmod@dividend,w
  2354  00FE  00F0               	movwf	?___awmod
  2355  00FF  0008               	return
  2356  0100                     __end_of___awmod:	
  2357                           
  2358                           	psect	text9
  2359  0159                     __ptext9:	
  2360 ;; *************** function ___awdiv *****************
  2361 ;; Defined at:
  2362 ;;		line 6 in file "D:\HardwareDesign\Microchip\xc8\v1.45\sources\common\awdiv.c"
  2363 ;; Parameters:    Size  Location     Type
  2364 ;;  divisor         2    0[COMMON] int 
  2365 ;;  dividend        2    2[COMMON] int 
  2366 ;; Auto vars:     Size  Location     Type
  2367 ;;  quotient        2    7[COMMON] int 
  2368 ;;  sign            1    6[COMMON] unsigned char 
  2369 ;;  counter         1    5[COMMON] unsigned char 
  2370 ;; Return value:  Size  Location     Type
  2371 ;;                  2    0[COMMON] int 
  2372 ;; Registers used:
  2373 ;;		wreg, status,2, status,0
  2374 ;; Tracked objects:
  2375 ;;		On entry : 0/0
  2376 ;;		On exit  : 0/0
  2377 ;;		Unchanged: 0/0
  2378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2379 ;;      Params:         4       0       0       0       0
  2380 ;;      Locals:         4       0       0       0       0
  2381 ;;      Temps:          1       0       0       0       0
  2382 ;;      Totals:         9       0       0       0       0
  2383 ;;Total ram usage:        9 bytes
  2384 ;; Hardware stack levels used:    1
  2385 ;; This function calls:
  2386 ;;		Nothing
  2387 ;; This function is called by:
  2388 ;;		_hienthiled
  2389 ;;		_main
  2390 ;; This function uses a non-reentrant model
  2391 ;;
  2392                           
  2393                           
  2394                           ;psect for function ___awdiv
  2395  0159                     ___awdiv:	
  2396                           
  2397                           ;incstack = 0
  2398                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  2399  0159  01F6               	clrf	___awdiv@sign
  2400  015A  1FF1               	btfss	___awdiv@divisor+1,7
  2401  015B  2963               	goto	l1282
  2402  015C  09F0               	comf	___awdiv@divisor,f
  2403  015D  09F1               	comf	___awdiv@divisor+1,f
  2404  015E  0AF0               	incf	___awdiv@divisor,f
  2405  015F  1903               	skipnz
  2406  0160  0AF1               	incf	___awdiv@divisor+1,f
  2407  0161  01F6               	clrf	___awdiv@sign
  2408  0162  0AF6               	incf	___awdiv@sign,f
  2409  0163                     l1282:	
  2410  0163  1FF3               	btfss	___awdiv@dividend+1,7
  2411  0164  296E               	goto	l1288
  2412  0165  09F2               	comf	___awdiv@dividend,f
  2413  0166  09F3               	comf	___awdiv@dividend+1,f
  2414  0167  0AF2               	incf	___awdiv@dividend,f
  2415  0168  1903               	skipnz
  2416  0169  0AF3               	incf	___awdiv@dividend+1,f
  2417  016A  3001               	movlw	1
  2418  016B  00F4               	movwf	??___awdiv
  2419  016C  0874               	movf	??___awdiv,w
  2420  016D  06F6               	xorwf	___awdiv@sign,f
  2421  016E                     l1288:	
  2422  016E  01F7               	clrf	___awdiv@quotient
  2423  016F  01F8               	clrf	___awdiv@quotient+1
  2424  0170  0870               	movf	___awdiv@divisor,w
  2425  0171  0471               	iorwf	___awdiv@divisor+1,w
  2426  0172  1903               	btfsc	3,2
  2427  0173  29A5               	goto	l1310
  2428  0174  01F5               	clrf	___awdiv@counter
  2429  0175  0AF5               	incf	___awdiv@counter,f
  2430  0176                     l1298:	
  2431  0176  1BF1               	btfsc	___awdiv@divisor+1,7
  2432  0177  2984               	goto	l1300
  2433  0178  3001               	movlw	1
  2434  0179                     u1355:	
  2435  0179  1003               	clrc
  2436  017A  0DF0               	rlf	___awdiv@divisor,f
  2437  017B  0DF1               	rlf	___awdiv@divisor+1,f
  2438  017C  3EFF               	addlw	-1
  2439  017D  1D03               	skipz
  2440  017E  2979               	goto	u1355
  2441  017F  3001               	movlw	1
  2442  0180  00F4               	movwf	??___awdiv
  2443  0181  0874               	movf	??___awdiv,w
  2444  0182  07F5               	addwf	___awdiv@counter,f
  2445  0183  2976               	goto	l1298
  2446  0184                     l1300:	
  2447  0184  3001               	movlw	1
  2448  0185                     u1375:	
  2449  0185  1003               	clrc
  2450  0186  0DF7               	rlf	___awdiv@quotient,f
  2451  0187  0DF8               	rlf	___awdiv@quotient+1,f
  2452  0188  3EFF               	addlw	-1
  2453  0189  1D03               	skipz
  2454  018A  2985               	goto	u1375
  2455  018B  0871               	movf	___awdiv@divisor+1,w
  2456  018C  0273               	subwf	___awdiv@dividend+1,w
  2457  018D  1D03               	skipz
  2458  018E  2991               	goto	u1385
  2459  018F  0870               	movf	___awdiv@divisor,w
  2460  0190  0272               	subwf	___awdiv@dividend,w
  2461  0191                     u1385:	
  2462  0191  1C03               	skipc
  2463  0192  299A               	goto	l1306
  2464  0193  0870               	movf	___awdiv@divisor,w
  2465  0194  02F2               	subwf	___awdiv@dividend,f
  2466  0195  0871               	movf	___awdiv@divisor+1,w
  2467  0196  1C03               	skipc
  2468  0197  03F3               	decf	___awdiv@dividend+1,f
  2469  0198  02F3               	subwf	___awdiv@dividend+1,f
  2470  0199  1477               	bsf	___awdiv@quotient,0
  2471  019A                     l1306:	
  2472  019A  3001               	movlw	1
  2473  019B                     u1395:	
  2474  019B  1003               	clrc
  2475  019C  0CF1               	rrf	___awdiv@divisor+1,f
  2476  019D  0CF0               	rrf	___awdiv@divisor,f
  2477  019E  3EFF               	addlw	-1
  2478  019F  1D03               	skipz
  2479  01A0  299B               	goto	u1395
  2480  01A1  3001               	movlw	1
  2481  01A2  02F5               	subwf	___awdiv@counter,f
  2482  01A3  1D03               	btfss	3,2
  2483  01A4  2984               	goto	l1300
  2484  01A5                     l1310:	
  2485  01A5  0876               	movf	___awdiv@sign,w
  2486  01A6  1903               	btfsc	3,2
  2487  01A7  29AD               	goto	l1314
  2488  01A8  09F7               	comf	___awdiv@quotient,f
  2489  01A9  09F8               	comf	___awdiv@quotient+1,f
  2490  01AA  0AF7               	incf	___awdiv@quotient,f
  2491  01AB  1903               	skipnz
  2492  01AC  0AF8               	incf	___awdiv@quotient+1,f
  2493  01AD                     l1314:	
  2494  01AD  0878               	movf	___awdiv@quotient+1,w
  2495  01AE  00F1               	movwf	?___awdiv+1
  2496  01AF  0877               	movf	___awdiv@quotient,w
  2497  01B0  00F0               	movwf	?___awdiv
  2498  01B1  0008               	return
  2499  01B2                     __end_of___awdiv:	
  2500                           
  2501                           	psect	text10
  2502  05F0                     __ptext10:	
  2503 ;; *************** function _UARTinit *****************
  2504 ;; Defined at:
  2505 ;;		line 127 in file "VXL_main.c"
  2506 ;; Parameters:    Size  Location     Type
  2507 ;;  baudrate        4    6[BANK0 ] const long 
  2508 ;; Auto vars:     Size  Location     Type
  2509 ;;  x               2    9[COMMON] unsigned int 
  2510 ;; Return value:  Size  Location     Type
  2511 ;;                  1    wreg      void 
  2512 ;; Registers used:
  2513 ;;		wreg, status,2, status,0, pclath, cstack
  2514 ;; Tracked objects:
  2515 ;;		On entry : 0/0
  2516 ;;		On exit  : 0/0
  2517 ;;		Unchanged: 0/0
  2518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2519 ;;      Params:         0       4       0       0       0
  2520 ;;      Locals:         2       0       0       0       0
  2521 ;;      Temps:          0      12       0       0       0
  2522 ;;      Totals:         2      16       0       0       0
  2523 ;;Total ram usage:       18 bytes
  2524 ;; Hardware stack levels used:    1
  2525 ;; Hardware stack levels required when called:    1
  2526 ;; This function calls:
  2527 ;;		___aldiv
  2528 ;; This function is called by:
  2529 ;;		_main
  2530 ;; This function uses a non-reentrant model
  2531 ;;
  2532                           
  2533                           
  2534                           ;psect for function _UARTinit
  2535  05F0                     _UARTinit:	
  2536                           
  2537                           ;VXL_main.c: 129: unsigned int x;
  2538                           ;VXL_main.c: 130: x = (1000000 - baudrate*64)/(baudrate*64);
  2539                           
  2540                           ;incstack = 0
  2541                           ; Regs used in _UARTinit: [wreg+status,2+status,0+pclath+cstack]
  2542  05F0  1283               	bcf	3,5	;RP0=0, select bank0
  2543  05F1  1303               	bcf	3,6	;RP1=0, select bank0
  2544  05F2  0826               	movf	UARTinit@baudrate,w
  2545  05F3  00AA               	movwf	??_UARTinit
  2546  05F4  0827               	movf	UARTinit@baudrate+1,w
  2547  05F5  00AB               	movwf	??_UARTinit+1
  2548  05F6  0828               	movf	UARTinit@baudrate+2,w
  2549  05F7  00AC               	movwf	??_UARTinit+2
  2550  05F8  0829               	movf	UARTinit@baudrate+3,w
  2551  05F9  00AD               	movwf	??_UARTinit+3
  2552  05FA  3006               	movlw	6
  2553  05FB                     u1935:	
  2554  05FB  1003               	clrc
  2555  05FC  0DAA               	rlf	??_UARTinit,f
  2556  05FD  0DAB               	rlf	??_UARTinit+1,f
  2557  05FE  0DAC               	rlf	??_UARTinit+2,f
  2558  05FF  0DAD               	rlf	??_UARTinit+3,f
  2559  0600  3EFF               	addlw	-1
  2560  0601  1D03               	skipz
  2561  0602  2DFB               	goto	u1935
  2562  0603  082D               	movf	??_UARTinit+3,w
  2563  0604  00F3               	movwf	___aldiv@divisor+3
  2564  0605  082C               	movf	??_UARTinit+2,w
  2565  0606  00F2               	movwf	___aldiv@divisor+2
  2566  0607  082B               	movf	??_UARTinit+1,w
  2567  0608  00F1               	movwf	___aldiv@divisor+1
  2568  0609  082A               	movf	??_UARTinit,w
  2569  060A  00F0               	movwf	___aldiv@divisor
  2570  060B  3040               	movlw	64
  2571  060C  00AE               	movwf	??_UARTinit+4
  2572  060D  3042               	movlw	66
  2573  060E  00AF               	movwf	??_UARTinit+5
  2574  060F  300F               	movlw	15
  2575  0610  00B0               	movwf	??_UARTinit+6
  2576  0611  3000               	movlw	0
  2577  0612  00B1               	movwf	??_UARTinit+7
  2578  0613  0826               	movf	UARTinit@baudrate,w
  2579  0614  00B2               	movwf	??_UARTinit+8
  2580  0615  0827               	movf	UARTinit@baudrate+1,w
  2581  0616  00B3               	movwf	??_UARTinit+9
  2582  0617  0828               	movf	UARTinit@baudrate+2,w
  2583  0618  00B4               	movwf	??_UARTinit+10
  2584  0619  0829               	movf	UARTinit@baudrate+3,w
  2585  061A  00B5               	movwf	??_UARTinit+11
  2586  061B  3006               	movlw	6
  2587  061C                     u1945:	
  2588  061C  1003               	clrc
  2589  061D  0DB2               	rlf	??_UARTinit+8,f
  2590  061E  0DB3               	rlf	??_UARTinit+9,f
  2591  061F  0DB4               	rlf	??_UARTinit+10,f
  2592  0620  0DB5               	rlf	??_UARTinit+11,f
  2593  0621  3EFF               	addlw	-1
  2594  0622  1D03               	skipz
  2595  0623  2E1C               	goto	u1945
  2596  0624  09B2               	comf	??_UARTinit+8,f
  2597  0625  09B3               	comf	??_UARTinit+9,f
  2598  0626  09B4               	comf	??_UARTinit+10,f
  2599  0627  09B5               	comf	??_UARTinit+11,f
  2600  0628  0AB2               	incf	??_UARTinit+8,f
  2601  0629  1903               	skipnz
  2602  062A  0AB3               	incf	??_UARTinit+9,f
  2603  062B  1903               	skipnz
  2604  062C  0AB4               	incf	??_UARTinit+10,f
  2605  062D  1903               	skipnz
  2606  062E  0AB5               	incf	??_UARTinit+11,f
  2607  062F  0832               	movf	??_UARTinit+8,w
  2608  0630  07AE               	addwf	??_UARTinit+4,f
  2609  0631  0833               	movf	??_UARTinit+9,w
  2610  0632  1803               	skipnc
  2611  0633  0F33               	incfsz	??_UARTinit+9,w
  2612  0634  2E36               	goto	u1950
  2613  0635  2E37               	goto	u1951
  2614  0636                     u1950:	
  2615  0636  07AF               	addwf	??_UARTinit+5,f
  2616  0637                     u1951:	
  2617  0637  0834               	movf	??_UARTinit+10,w
  2618  0638  1803               	skipnc
  2619  0639  0F34               	incfsz	??_UARTinit+10,w
  2620  063A  2E3C               	goto	u1952
  2621  063B  2E3D               	goto	u1953
  2622  063C                     u1952:	
  2623  063C  07B0               	addwf	??_UARTinit+6,f
  2624  063D                     u1953:	
  2625  063D  0835               	movf	??_UARTinit+11,w
  2626  063E  1803               	skipnc
  2627  063F  0A35               	incf	??_UARTinit+11,w
  2628  0640  07B1               	addwf	??_UARTinit+7,f
  2629  0641  0831               	movf	??_UARTinit+7,w
  2630  0642  00F7               	movwf	___aldiv@dividend+3
  2631  0643  0830               	movf	??_UARTinit+6,w
  2632  0644  00F6               	movwf	___aldiv@dividend+2
  2633  0645  082F               	movf	??_UARTinit+5,w
  2634  0646  00F5               	movwf	___aldiv@dividend+1
  2635  0647  082E               	movf	??_UARTinit+4,w
  2636  0648  00F4               	movwf	___aldiv@dividend
  2637  0649  120A  118A  2333  120A  118A  	fcall	___aldiv
  2638  064E  0871               	movf	?___aldiv+1,w
  2639  064F  00FA               	movwf	UARTinit@x+1
  2640  0650  0870               	movf	?___aldiv,w
  2641  0651  00F9               	movwf	UARTinit@x
  2642                           
  2643                           ;VXL_main.c: 131: if(x>255)
  2644  0652  3001               	movlw	1
  2645  0653  027A               	subwf	UARTinit@x+1,w
  2646  0654  3000               	movlw	0
  2647  0655  1903               	skipnz
  2648  0656  0279               	subwf	UARTinit@x,w
  2649  0657  1C03               	skipc
  2650  0658  2EBE               	goto	l1600
  2651                           
  2652                           ;VXL_main.c: 132: {
  2653                           ;VXL_main.c: 133: x = (1000000 - baudrate*16)/(baudrate*16);
  2654  0659  1283               	bcf	3,5	;RP0=0, select bank0
  2655  065A  1303               	bcf	3,6	;RP1=0, select bank0
  2656  065B  0826               	movf	UARTinit@baudrate,w
  2657  065C  00AA               	movwf	??_UARTinit
  2658  065D  0827               	movf	UARTinit@baudrate+1,w
  2659  065E  00AB               	movwf	??_UARTinit+1
  2660  065F  0828               	movf	UARTinit@baudrate+2,w
  2661  0660  00AC               	movwf	??_UARTinit+2
  2662  0661  0829               	movf	UARTinit@baudrate+3,w
  2663  0662  00AD               	movwf	??_UARTinit+3
  2664  0663  3004               	movlw	4
  2665  0664                     u1975:	
  2666  0664  1003               	clrc
  2667  0665  0DAA               	rlf	??_UARTinit,f
  2668  0666  0DAB               	rlf	??_UARTinit+1,f
  2669  0667  0DAC               	rlf	??_UARTinit+2,f
  2670  0668  0DAD               	rlf	??_UARTinit+3,f
  2671  0669  3EFF               	addlw	-1
  2672  066A  1D03               	skipz
  2673  066B  2E64               	goto	u1975
  2674  066C  082D               	movf	??_UARTinit+3,w
  2675  066D  00F3               	movwf	___aldiv@divisor+3
  2676  066E  082C               	movf	??_UARTinit+2,w
  2677  066F  00F2               	movwf	___aldiv@divisor+2
  2678  0670  082B               	movf	??_UARTinit+1,w
  2679  0671  00F1               	movwf	___aldiv@divisor+1
  2680  0672  082A               	movf	??_UARTinit,w
  2681  0673  00F0               	movwf	___aldiv@divisor
  2682  0674  3040               	movlw	64
  2683  0675  00AE               	movwf	??_UARTinit+4
  2684  0676  3042               	movlw	66
  2685  0677  00AF               	movwf	??_UARTinit+5
  2686  0678  300F               	movlw	15
  2687  0679  00B0               	movwf	??_UARTinit+6
  2688  067A  3000               	movlw	0
  2689  067B  00B1               	movwf	??_UARTinit+7
  2690  067C  0826               	movf	UARTinit@baudrate,w
  2691  067D  00B2               	movwf	??_UARTinit+8
  2692  067E  0827               	movf	UARTinit@baudrate+1,w
  2693  067F  00B3               	movwf	??_UARTinit+9
  2694  0680  0828               	movf	UARTinit@baudrate+2,w
  2695  0681  00B4               	movwf	??_UARTinit+10
  2696  0682  0829               	movf	UARTinit@baudrate+3,w
  2697  0683  00B5               	movwf	??_UARTinit+11
  2698  0684  3004               	movlw	4
  2699  0685                     u1985:	
  2700  0685  1003               	clrc
  2701  0686  0DB2               	rlf	??_UARTinit+8,f
  2702  0687  0DB3               	rlf	??_UARTinit+9,f
  2703  0688  0DB4               	rlf	??_UARTinit+10,f
  2704  0689  0DB5               	rlf	??_UARTinit+11,f
  2705  068A  3EFF               	addlw	-1
  2706  068B  1D03               	skipz
  2707  068C  2E85               	goto	u1985
  2708  068D  09B2               	comf	??_UARTinit+8,f
  2709  068E  09B3               	comf	??_UARTinit+9,f
  2710  068F  09B4               	comf	??_UARTinit+10,f
  2711  0690  09B5               	comf	??_UARTinit+11,f
  2712  0691  0AB2               	incf	??_UARTinit+8,f
  2713  0692  1903               	skipnz
  2714  0693  0AB3               	incf	??_UARTinit+9,f
  2715  0694  1903               	skipnz
  2716  0695  0AB4               	incf	??_UARTinit+10,f
  2717  0696  1903               	skipnz
  2718  0697  0AB5               	incf	??_UARTinit+11,f
  2719  0698  0832               	movf	??_UARTinit+8,w
  2720  0699  07AE               	addwf	??_UARTinit+4,f
  2721  069A  0833               	movf	??_UARTinit+9,w
  2722  069B  1803               	skipnc
  2723  069C  0F33               	incfsz	??_UARTinit+9,w
  2724  069D  2E9F               	goto	u1990
  2725  069E  2EA0               	goto	u1991
  2726  069F                     u1990:	
  2727  069F  07AF               	addwf	??_UARTinit+5,f
  2728  06A0                     u1991:	
  2729  06A0  0834               	movf	??_UARTinit+10,w
  2730  06A1  1803               	skipnc
  2731  06A2  0F34               	incfsz	??_UARTinit+10,w
  2732  06A3  2EA5               	goto	u1992
  2733  06A4  2EA6               	goto	u1993
  2734  06A5                     u1992:	
  2735  06A5  07B0               	addwf	??_UARTinit+6,f
  2736  06A6                     u1993:	
  2737  06A6  0835               	movf	??_UARTinit+11,w
  2738  06A7  1803               	skipnc
  2739  06A8  0A35               	incf	??_UARTinit+11,w
  2740  06A9  07B1               	addwf	??_UARTinit+7,f
  2741  06AA  0831               	movf	??_UARTinit+7,w
  2742  06AB  00F7               	movwf	___aldiv@dividend+3
  2743  06AC  0830               	movf	??_UARTinit+6,w
  2744  06AD  00F6               	movwf	___aldiv@dividend+2
  2745  06AE  082F               	movf	??_UARTinit+5,w
  2746  06AF  00F5               	movwf	___aldiv@dividend+1
  2747  06B0  082E               	movf	??_UARTinit+4,w
  2748  06B1  00F4               	movwf	___aldiv@dividend
  2749  06B2  120A  118A  2333  120A  118A  	fcall	___aldiv
  2750  06B7  0871               	movf	?___aldiv+1,w
  2751  06B8  00FA               	movwf	UARTinit@x+1
  2752  06B9  0870               	movf	?___aldiv,w
  2753  06BA  00F9               	movwf	UARTinit@x
  2754                           
  2755                           ;VXL_main.c: 134: BRGH = 1;
  2756  06BB  1683               	bsf	3,5	;RP0=1, select bank1
  2757  06BC  1303               	bcf	3,6	;RP1=0, select bank1
  2758  06BD  1518               	bsf	24,2	;volatile
  2759  06BE                     l1600:	
  2760                           
  2761                           ;VXL_main.c: 135: }
  2762                           ;VXL_main.c: 136: if(x<256)
  2763  06BE  3001               	movlw	1
  2764  06BF  027A               	subwf	UARTinit@x+1,w
  2765  06C0  3000               	movlw	0
  2766  06C1  1903               	skipnz
  2767  06C2  0279               	subwf	UARTinit@x,w
  2768  06C3  1803               	skipnc
  2769  06C4  0008               	return
  2770                           
  2771                           ;VXL_main.c: 137: {
  2772                           ;VXL_main.c: 139: SPBRG = x;
  2773  06C5  0879               	movf	UARTinit@x,w
  2774  06C6  1683               	bsf	3,5	;RP0=1, select bank1
  2775  06C7  1303               	bcf	3,6	;RP1=0, select bank1
  2776  06C8  0099               	movwf	25	;volatile
  2777                           
  2778                           ;VXL_main.c: 140: SYNC = 0;
  2779  06C9  1218               	bcf	24,4	;volatile
  2780                           
  2781                           ;VXL_main.c: 141: SPEN = 1;
  2782  06CA  1283               	bcf	3,5	;RP0=0, select bank0
  2783  06CB  1303               	bcf	3,6	;RP1=0, select bank0
  2784  06CC  1798               	bsf	24,7	;volatile
  2785                           
  2786                           ;VXL_main.c: 143: CREN = 1;
  2787  06CD  1618               	bsf	24,4	;volatile
  2788                           
  2789                           ;VXL_main.c: 144: TXEN = 1;
  2790  06CE  1683               	bsf	3,5	;RP0=1, select bank1
  2791  06CF  1303               	bcf	3,6	;RP1=0, select bank1
  2792  06D0  1698               	bsf	24,5	;volatile
  2793                           
  2794                           ;VXL_main.c: 146: TRISC7 = 1;
  2795  06D1  1787               	bsf	7,7	;volatile
  2796                           
  2797                           ;VXL_main.c: 147: TRISC6 = 1;
  2798  06D2  1707               	bsf	7,6	;volatile
  2799  06D3  0008               	return
  2800  06D4                     __end_of_UARTinit:	
  2801                           
  2802                           	psect	text11
  2803  0100                     __ptext11:	
  2804 ;; *************** function _UART_Write_number *****************
  2805 ;; Defined at:
  2806 ;;		line 172 in file "VXL_main.c"
  2807 ;; Parameters:    Size  Location     Type
  2808 ;;  a               2    1[COMMON] int 
  2809 ;; Auto vars:     Size  Location     Type
  2810 ;;		None
  2811 ;; Return value:  Size  Location     Type
  2812 ;;                  1    wreg      void 
  2813 ;; Registers used:
  2814 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2815 ;; Tracked objects:
  2816 ;;		On entry : 0/0
  2817 ;;		On exit  : 0/0
  2818 ;;		Unchanged: 0/0
  2819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2820 ;;      Params:         2       0       0       0       0
  2821 ;;      Locals:         0       0       0       0       0
  2822 ;;      Temps:          0       0       0       0       0
  2823 ;;      Totals:         2       0       0       0       0
  2824 ;;Total ram usage:        2 bytes
  2825 ;; Hardware stack levels used:    1
  2826 ;; Hardware stack levels required when called:    1
  2827 ;; This function calls:
  2828 ;;		_UART_Write
  2829 ;; This function is called by:
  2830 ;;		_main
  2831 ;; This function uses a non-reentrant model
  2832 ;;
  2833                           
  2834                           
  2835                           ;psect for function _UART_Write_number
  2836  0100                     _UART_Write_number:	
  2837                           
  2838                           ;VXL_main.c: 174: switch(a)
  2839                           
  2840                           ;incstack = 0
  2841                           ; Regs used in _UART_Write_number: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2842  0100  2933               	goto	l1648
  2843  0101                     l1626:	
  2844                           ;VXL_main.c: 175: {
  2845                           ;VXL_main.c: 176: case 0: UART_Write('0'); break;
  2846                           
  2847  0101  3030               	movlw	48
  2848  0102  120A  158A  27A8   	fcall	_UART_Write
  2849  0105  0008               	return
  2850  0106                     l1628:	
  2851                           ;VXL_main.c: 177: case 1: UART_Write('1'); break;
  2852                           
  2853  0106  3031               	movlw	49
  2854  0107  120A  158A  27A8   	fcall	_UART_Write
  2855  010A  0008               	return
  2856  010B                     l1630:	
  2857                           ;VXL_main.c: 178: case 2: UART_Write('2'); break;
  2858                           
  2859  010B  3032               	movlw	50
  2860  010C  120A  158A  27A8   	fcall	_UART_Write
  2861  010F  0008               	return
  2862  0110                     l1632:	
  2863                           ;VXL_main.c: 179: case 3: UART_Write('3'); break;
  2864                           
  2865  0110  3033               	movlw	51
  2866  0111  120A  158A  27A8   	fcall	_UART_Write
  2867  0114  0008               	return
  2868  0115                     l1634:	
  2869                           ;VXL_main.c: 180: case 4: UART_Write('4'); break;
  2870                           
  2871  0115  3034               	movlw	52
  2872  0116  120A  158A  27A8   	fcall	_UART_Write
  2873  0119  0008               	return
  2874  011A                     l1636:	
  2875                           ;VXL_main.c: 181: case 5: UART_Write('5'); break;
  2876                           
  2877  011A  3035               	movlw	53
  2878  011B  120A  158A  27A8   	fcall	_UART_Write
  2879  011E  0008               	return
  2880  011F                     l1638:	
  2881                           ;VXL_main.c: 182: case 6: UART_Write('6'); break;
  2882                           
  2883  011F  3036               	movlw	54
  2884  0120  120A  158A  27A8   	fcall	_UART_Write
  2885  0123  0008               	return
  2886  0124                     l1640:	
  2887                           ;VXL_main.c: 183: case 7: UART_Write('7'); break;
  2888                           
  2889  0124  3037               	movlw	55
  2890  0125  120A  158A  27A8   	fcall	_UART_Write
  2891  0128  0008               	return
  2892  0129                     l1642:	
  2893                           ;VXL_main.c: 184: case 8: UART_Write('8'); break;
  2894                           
  2895  0129  3038               	movlw	56
  2896  012A  120A  158A  27A8   	fcall	_UART_Write
  2897  012D  0008               	return
  2898  012E                     l1644:	
  2899                           ;VXL_main.c: 185: case 9: UART_Write('9'); break;
  2900                           
  2901  012E  3039               	movlw	57
  2902  012F  120A  158A  27A8   	fcall	_UART_Write
  2903                           
  2904                           ;VXL_main.c: 186: }
  2905  0132  0008               	return
  2906  0133                     l1648:	
  2907                           
  2908                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2909                           ; Switch size 1, requested type "space"
  2910                           ; Number of cases is 1, Range of values is 0 to 0
  2911                           ; switch strategies available:
  2912                           ; Name         Instructions Cycles
  2913                           ; simple_byte            4     3 (average)
  2914                           ; direct_byte           11     8 (fixed)
  2915                           ; jumptable            260     6 (fixed)
  2916                           ;	Chosen strategy is simple_byte
  2917  0133  0872               	movf	UART_Write_number@a+1,w
  2918  0134  3A00               	xorlw	0	; case 0
  2919  0135  1903               	skipnz
  2920  0136  2938               	goto	l1754
  2921  0137  2958               	goto	l132
  2922  0138                     l1754:	
  2923                           
  2924                           ; Switch size 1, requested type "space"
  2925                           ; Number of cases is 10, Range of values is 0 to 9
  2926                           ; switch strategies available:
  2927                           ; Name         Instructions Cycles
  2928                           ; simple_byte           31    16 (average)
  2929                           ; direct_byte           38     8 (fixed)
  2930                           ; jumptable            260     6 (fixed)
  2931                           ;	Chosen strategy is simple_byte
  2932  0138  0871               	movf	UART_Write_number@a,w
  2933  0139  3A00               	xorlw	0	; case 0
  2934  013A  1903               	skipnz
  2935  013B  2901               	goto	l1626
  2936  013C  3A01               	xorlw	1	; case 1
  2937  013D  1903               	skipnz
  2938  013E  2906               	goto	l1628
  2939  013F  3A03               	xorlw	3	; case 2
  2940  0140  1903               	skipnz
  2941  0141  290B               	goto	l1630
  2942  0142  3A01               	xorlw	1	; case 3
  2943  0143  1903               	skipnz
  2944  0144  2910               	goto	l1632
  2945  0145  3A07               	xorlw	7	; case 4
  2946  0146  1903               	skipnz
  2947  0147  2915               	goto	l1634
  2948  0148  3A01               	xorlw	1	; case 5
  2949  0149  1903               	skipnz
  2950  014A  291A               	goto	l1636
  2951  014B  3A03               	xorlw	3	; case 6
  2952  014C  1903               	skipnz
  2953  014D  291F               	goto	l1638
  2954  014E  3A01               	xorlw	1	; case 7
  2955  014F  1903               	skipnz
  2956  0150  2924               	goto	l1640
  2957  0151  3A0F               	xorlw	15	; case 8
  2958  0152  1903               	skipnz
  2959  0153  2929               	goto	l1642
  2960  0154  3A01               	xorlw	1	; case 9
  2961  0155  1903               	skipnz
  2962  0156  292E               	goto	l1644
  2963  0157  2958               	goto	l132
  2964  0158                     l132:	
  2965  0158  0008               	return
  2966  0159                     __end_of_UART_Write_number:	
  2967                           
  2968                           	psect	text12
  2969  0026                     __ptext12:	
  2970 ;; *************** function _UART_Write_Text *****************
  2971 ;; Defined at:
  2972 ;;		line 166 in file "VXL_main.c"
  2973 ;; Parameters:    Size  Location     Type
  2974 ;;  a               1    wreg     PTR unsigned char 
  2975 ;;		 -> STR_2(9), STR_1(11), 
  2976 ;; Auto vars:     Size  Location     Type
  2977 ;;  a               1    3[COMMON] PTR unsigned char 
  2978 ;;		 -> STR_2(9), STR_1(11), 
  2979 ;;  i               2    1[COMMON] int 
  2980 ;; Return value:  Size  Location     Type
  2981 ;;                  1    wreg      void 
  2982 ;; Registers used:
  2983 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2984 ;; Tracked objects:
  2985 ;;		On entry : 0/0
  2986 ;;		On exit  : 0/0
  2987 ;;		Unchanged: 0/0
  2988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2989 ;;      Params:         0       0       0       0       0
  2990 ;;      Locals:         3       0       0       0       0
  2991 ;;      Temps:          0       0       0       0       0
  2992 ;;      Totals:         3       0       0       0       0
  2993 ;;Total ram usage:        3 bytes
  2994 ;; Hardware stack levels used:    1
  2995 ;; Hardware stack levels required when called:    1
  2996 ;; This function calls:
  2997 ;;		_UART_Write
  2998 ;; This function is called by:
  2999 ;;		_main
  3000 ;; This function uses a non-reentrant model
  3001 ;;
  3002                           
  3003                           
  3004                           ;psect for function _UART_Write_Text
  3005  0026                     _UART_Write_Text:	
  3006                           
  3007                           ;incstack = 0
  3008                           ; Regs used in _UART_Write_Text: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3009                           ;UART_Write_Text@a stored from wreg
  3010  0026  00F3               	movwf	UART_Write_Text@a
  3011                           
  3012                           ;VXL_main.c: 168: int i;
  3013                           ;VXL_main.c: 169: for(i=0;a[i]!='\0';i++)
  3014  0027  01F1               	clrf	UART_Write_Text@i
  3015  0028  01F2               	clrf	UART_Write_Text@i+1
  3016  0029                     l1622:	
  3017  0029  0871               	movf	UART_Write_Text@i,w
  3018  002A  0773               	addwf	UART_Write_Text@a,w
  3019  002B  0084               	movwf	4
  3020  002C  120A  158A  2000  120A  118A  	fcall	stringdir
  3021  0031  3A00               	xorlw	0
  3022  0032  1903               	btfsc	3,2
  3023  0033  0008               	return
  3024                           
  3025                           ;VXL_main.c: 170: UART_Write(a[i]);
  3026  0034  0871               	movf	UART_Write_Text@i,w
  3027  0035  0773               	addwf	UART_Write_Text@a,w
  3028  0036  0084               	movwf	4
  3029  0037  120A  158A  2000  120A  118A  	fcall	stringdir
  3030  003C  120A  158A  27A8  120A  118A  	fcall	_UART_Write
  3031  0041  3001               	movlw	1
  3032  0042  07F1               	addwf	UART_Write_Text@i,f
  3033  0043  1803               	skipnc
  3034  0044  0AF2               	incf	UART_Write_Text@i+1,f
  3035  0045  3000               	movlw	0
  3036  0046  07F2               	addwf	UART_Write_Text@i+1,f
  3037  0047  2829               	goto	l1622
  3038  0048                     __end_of_UART_Write_Text:	
  3039                           
  3040                           	psect	text13
  3041  0FA8                     __ptext13:	
  3042 ;; *************** function _UART_Write *****************
  3043 ;; Defined at:
  3044 ;;		line 160 in file "VXL_main.c"
  3045 ;; Parameters:    Size  Location     Type
  3046 ;;  data            1    wreg     unsigned char 
  3047 ;; Auto vars:     Size  Location     Type
  3048 ;;  data            1    0[COMMON] unsigned char 
  3049 ;; Return value:  Size  Location     Type
  3050 ;;                  1    wreg      void 
  3051 ;; Registers used:
  3052 ;;		wreg
  3053 ;; Tracked objects:
  3054 ;;		On entry : 0/0
  3055 ;;		On exit  : 0/0
  3056 ;;		Unchanged: 0/0
  3057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3058 ;;      Params:         0       0       0       0       0
  3059 ;;      Locals:         1       0       0       0       0
  3060 ;;      Temps:          0       0       0       0       0
  3061 ;;      Totals:         1       0       0       0       0
  3062 ;;Total ram usage:        1 bytes
  3063 ;; Hardware stack levels used:    1
  3064 ;; This function calls:
  3065 ;;		Nothing
  3066 ;; This function is called by:
  3067 ;;		_UART_Write_Text
  3068 ;;		_UART_Write_number
  3069 ;;		_main
  3070 ;; This function uses a non-reentrant model
  3071 ;;
  3072                           
  3073                           
  3074                           ;psect for function _UART_Write
  3075  0FA8                     _UART_Write:	
  3076                           
  3077                           ;incstack = 0
  3078                           ; Regs used in _UART_Write: [wreg]
  3079                           ;UART_Write@data stored from wreg
  3080  0FA8  00F0               	movwf	UART_Write@data
  3081  0FA9                     l108:	
  3082                           ;VXL_main.c: 162: while(!TRMT);
  3083                           
  3084  0FA9  1683               	bsf	3,5	;RP0=1, select bank1
  3085  0FAA  1303               	bcf	3,6	;RP1=0, select bank1
  3086  0FAB  1C98               	btfss	24,1	;volatile
  3087  0FAC  2FA9               	goto	l108
  3088                           
  3089                           ;VXL_main.c: 163: TXREG = data;
  3090  0FAD  0870               	movf	UART_Write@data,w
  3091  0FAE  1283               	bcf	3,5	;RP0=0, select bank0
  3092  0FAF  1303               	bcf	3,6	;RP1=0, select bank0
  3093  0FB0  0099               	movwf	25	;volatile
  3094  0FB1  0008               	return
  3095  0FB2                     __end_of_UART_Write:	
  3096                           
  3097                           	psect	text14
  3098  0FB2                     __ptext14:	
  3099 ;; *************** function _PWM_Initalize *****************
  3100 ;; Defined at:
  3101 ;;		line 16 in file "VXL_main.c"
  3102 ;; Parameters:    Size  Location     Type
  3103 ;;		None
  3104 ;; Auto vars:     Size  Location     Type
  3105 ;;		None
  3106 ;; Return value:  Size  Location     Type
  3107 ;;                  1    wreg      void 
  3108 ;; Registers used:
  3109 ;;		None
  3110 ;; Tracked objects:
  3111 ;;		On entry : 0/0
  3112 ;;		On exit  : 0/0
  3113 ;;		Unchanged: 0/0
  3114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3115 ;;      Params:         0       0       0       0       0
  3116 ;;      Locals:         0       0       0       0       0
  3117 ;;      Temps:          0       0       0       0       0
  3118 ;;      Totals:         0       0       0       0       0
  3119 ;;Total ram usage:        0 bytes
  3120 ;; Hardware stack levels used:    1
  3121 ;; This function calls:
  3122 ;;		Nothing
  3123 ;; This function is called by:
  3124 ;;		_main
  3125 ;; This function uses a non-reentrant model
  3126 ;;
  3127                           
  3128                           
  3129                           ;psect for function _PWM_Initalize
  3130  0FB2                     _PWM_Initalize:	
  3131                           
  3132                           ;VXL_main.c: 18: TRISC2 = 0;
  3133                           
  3134                           ;incstack = 0
  3135                           ; Regs used in _PWM_Initalize: []
  3136  0FB2  1683               	bsf	3,5	;RP0=1, select bank1
  3137  0FB3  1303               	bcf	3,6	;RP1=0, select bank1
  3138  0FB4  1107               	bcf	7,2	;volatile
  3139                           
  3140                           ;VXL_main.c: 19: TRISD0 = 1;
  3141  0FB5  1408               	bsf	8,0	;volatile
  3142                           
  3143                           ;VXL_main.c: 20: TRISD1 = 1;
  3144  0FB6  1488               	bsf	8,1	;volatile
  3145                           
  3146                           ;VXL_main.c: 21: TRISD2 = 1;
  3147  0FB7  1508               	bsf	8,2	;volatile
  3148                           
  3149                           ;VXL_main.c: 22: TRISD3 = 1;
  3150  0FB8  1588               	bsf	8,3	;volatile
  3151                           
  3152                           ;VXL_main.c: 23: TRISD4 = 0;
  3153  0FB9  1208               	bcf	8,4	;volatile
  3154                           
  3155                           ;VXL_main.c: 24: TRISD5 = 0;
  3156  0FBA  1288               	bcf	8,5	;volatile
  3157                           
  3158                           ;VXL_main.c: 25: TRISD6 = 0;
  3159  0FBB  1308               	bcf	8,6	;volatile
  3160                           
  3161                           ;VXL_main.c: 26: TRISD7 = 0;
  3162  0FBC  1388               	bcf	8,7	;volatile
  3163                           
  3164                           ;VXL_main.c: 28: CCP1CONbits.CCP1M3 = 1;
  3165  0FBD  1283               	bcf	3,5	;RP0=0, select bank0
  3166  0FBE  1303               	bcf	3,6	;RP1=0, select bank0
  3167  0FBF  1597               	bsf	23,3	;volatile
  3168                           
  3169                           ;VXL_main.c: 29: CCP1CONbits.CCP1M2 = 1;
  3170  0FC0  1517               	bsf	23,2	;volatile
  3171                           
  3172                           ;VXL_main.c: 30: CCP1CONbits.CCP1M1 = 1;
  3173  0FC1  1497               	bsf	23,1	;volatile
  3174                           
  3175                           ;VXL_main.c: 31: CCP1CONbits.CCP1M0= 1;
  3176  0FC2  1417               	bsf	23,0	;volatile
  3177                           
  3178                           ;VXL_main.c: 33: T2CONbits.TMR2ON = 1;
  3179  0FC3  1512               	bsf	18,2	;volatile
  3180                           
  3181                           ;VXL_main.c: 35: T2CONbits.T2CKPS0 = 1;
  3182  0FC4  1412               	bsf	18,0	;volatile
  3183                           
  3184                           ;VXL_main.c: 36: T2CONbits.T2CKPS1 = 1;
  3185  0FC5  1492               	bsf	18,1	;volatile
  3186  0FC6  0008               	return
  3187  0FC7                     __end_of_PWM_Initalize:	
  3188                           
  3189                           	psect	text15
  3190  021E                     __ptext15:	
  3191 ;; *************** function _PWM_DutyCycle *****************
  3192 ;; Defined at:
  3193 ;;		line 42 in file "VXL_main.c"
  3194 ;; Parameters:    Size  Location     Type
  3195 ;;  duty            2    6[BANK0 ] unsigned int 
  3196 ;; Auto vars:     Size  Location     Type
  3197 ;;		None
  3198 ;; Return value:  Size  Location     Type
  3199 ;;                  1    wreg      void 
  3200 ;; Registers used:
  3201 ;;		wreg, status,2, status,0, pclath, cstack
  3202 ;; Tracked objects:
  3203 ;;		On entry : 0/0
  3204 ;;		On exit  : 0/0
  3205 ;;		Unchanged: 0/0
  3206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3207 ;;      Params:         0       2       0       0       0
  3208 ;;      Locals:         0       0       0       0       0
  3209 ;;      Temps:          0       2       0       0       0
  3210 ;;      Totals:         0       4       0       0       0
  3211 ;;Total ram usage:        4 bytes
  3212 ;; Hardware stack levels used:    1
  3213 ;; Hardware stack levels required when called:    1
  3214 ;; This function calls:
  3215 ;;		___aldiv
  3216 ;;		___lwdiv
  3217 ;;		___wmul
  3218 ;; This function is called by:
  3219 ;;		_main
  3220 ;; This function uses a non-reentrant model
  3221 ;;
  3222                           
  3223                           
  3224                           ;psect for function _PWM_DutyCycle
  3225  021E                     _PWM_DutyCycle:	
  3226                           
  3227                           ;VXL_main.c: 49: PR2 = (1000000/(500*4*16)) - 1;
  3228                           
  3229                           ;incstack = 0
  3230                           ; Regs used in _PWM_DutyCycle: [wreg+status,2+status,0+pclath+cstack]
  3231  021E  301E               	movlw	30
  3232  021F  1683               	bsf	3,5	;RP0=1, select bank1
  3233  0220  1303               	bcf	3,6	;RP1=0, select bank1
  3234  0221  0092               	movwf	18	;volatile
  3235                           
  3236                           ;VXL_main.c: 51: PWM_period = (PR2+1)*4*16/1000000;
  3237  0222  3000               	movlw	0
  3238  0223  00F3               	movwf	___aldiv@divisor+3
  3239  0224  300F               	movlw	15
  3240  0225  00F2               	movwf	___aldiv@divisor+2
  3241  0226  3042               	movlw	66
  3242  0227  00F1               	movwf	___aldiv@divisor+1
  3243  0228  3040               	movlw	64
  3244  0229  00F0               	movwf	___aldiv@divisor
  3245  022A  0812               	movf	18,w	;volatile
  3246  022B  1283               	bcf	3,5	;RP0=0, select bank0
  3247  022C  1303               	bcf	3,6	;RP1=0, select bank0
  3248  022D  00A8               	movwf	??_PWM_DutyCycle
  3249  022E  01A9               	clrf	??_PWM_DutyCycle+1
  3250  022F  1003               	clrc
  3251  0230  0DA8               	rlf	??_PWM_DutyCycle,f
  3252  0231  0DA9               	rlf	??_PWM_DutyCycle+1,f
  3253  0232  1003               	clrc
  3254  0233  0DA8               	rlf	??_PWM_DutyCycle,f
  3255  0234  0DA9               	rlf	??_PWM_DutyCycle+1,f
  3256  0235  0EA8               	swapf	??_PWM_DutyCycle,f
  3257  0236  0EA9               	swapf	??_PWM_DutyCycle+1,f
  3258  0237  30F0               	movlw	240
  3259  0238  05A9               	andwf	??_PWM_DutyCycle+1,f
  3260  0239  0828               	movf	??_PWM_DutyCycle,w
  3261  023A  390F               	andlw	15
  3262  023B  04A9               	iorwf	??_PWM_DutyCycle+1,f
  3263  023C  30F0               	movlw	240
  3264  023D  05A8               	andwf	??_PWM_DutyCycle,f
  3265  023E  0828               	movf	??_PWM_DutyCycle,w
  3266  023F  3E40               	addlw	64
  3267  0240  00F4               	movwf	___aldiv@dividend
  3268  0241  0829               	movf	??_PWM_DutyCycle+1,w
  3269  0242  1803               	skipnc
  3270  0243  3E01               	addlw	1
  3271  0244  3E00               	addlw	0
  3272  0245  00F5               	movwf	___aldiv@dividend+1
  3273  0246  01F6               	clrf	___aldiv@dividend+2
  3274  0247  1BF5               	btfsc	___aldiv@dividend+1,7
  3275  0248  03F6               	decf	___aldiv@dividend+2,f
  3276  0249  0876               	movf	___aldiv@dividend+2,w
  3277  024A  00F7               	movwf	___aldiv@dividend+3
  3278  024B  120A  118A  2333  120A  118A  	fcall	___aldiv
  3279  0250  0871               	movf	?___aldiv+1,w
  3280  0251  1283               	bcf	3,5	;RP0=0, select bank0
  3281  0252  1303               	bcf	3,6	;RP1=0, select bank0
  3282  0253  00E5               	movwf	_PWM_period+1
  3283  0254  0870               	movf	?___aldiv,w
  3284  0255  00E4               	movwf	_PWM_period
  3285                           
  3286                           ;VXL_main.c: 52: PWM_duty = 4*(PR2+1)*duty/100;
  3287  0256  3064               	movlw	100
  3288  0257  00F6               	movwf	___lwdiv@divisor
  3289  0258  3000               	movlw	0
  3290  0259  00F7               	movwf	___lwdiv@divisor+1
  3291  025A  1683               	bsf	3,5	;RP0=1, select bank1
  3292  025B  1303               	bcf	3,6	;RP1=0, select bank1
  3293  025C  0812               	movf	18,w	;volatile
  3294  025D  1283               	bcf	3,5	;RP0=0, select bank0
  3295  025E  1303               	bcf	3,6	;RP1=0, select bank0
  3296  025F  00A8               	movwf	??_PWM_DutyCycle
  3297  0260  01A9               	clrf	??_PWM_DutyCycle+1
  3298  0261  1003               	clrc
  3299  0262  0DA8               	rlf	??_PWM_DutyCycle,f
  3300  0263  0DA9               	rlf	??_PWM_DutyCycle+1,f
  3301  0264  1003               	clrc
  3302  0265  0DA8               	rlf	??_PWM_DutyCycle,f
  3303  0266  0DA9               	rlf	??_PWM_DutyCycle+1,f
  3304  0267  0828               	movf	??_PWM_DutyCycle,w
  3305  0268  3E04               	addlw	4
  3306  0269  00F0               	movwf	___wmul@multiplier
  3307  026A  0829               	movf	??_PWM_DutyCycle+1,w
  3308  026B  1803               	skipnc
  3309  026C  3E01               	addlw	1
  3310  026D  3E00               	addlw	0
  3311  026E  00F1               	movwf	___wmul@multiplier+1
  3312  026F  0827               	movf	PWM_DutyCycle@duty+1,w
  3313  0270  00F3               	movwf	___wmul@multiplicand+1
  3314  0271  0826               	movf	PWM_DutyCycle@duty,w
  3315  0272  00F2               	movwf	___wmul@multiplicand
  3316  0273  120A  118A  2005  120A  118A  	fcall	___wmul
  3317  0278  0871               	movf	?___wmul+1,w
  3318  0279  00F9               	movwf	___lwdiv@dividend+1
  3319  027A  0870               	movf	?___wmul,w
  3320  027B  00F8               	movwf	___lwdiv@dividend
  3321  027C  120A  118A  2079   	fcall	___lwdiv
  3322  027F  0877               	movf	?___lwdiv+1,w
  3323  0280  1283               	bcf	3,5	;RP0=0, select bank0
  3324  0281  1303               	bcf	3,6	;RP1=0, select bank0
  3325  0282  00E3               	movwf	_PWM_duty+1
  3326  0283  0876               	movf	?___lwdiv,w
  3327  0284  00E2               	movwf	_PWM_duty
  3328                           
  3329                           ;VXL_main.c: 54: CCP1CONbits.CCP1X = PWM_duty & 2;
  3330  0285  0862               	movf	_PWM_duty,w
  3331  0286  3902               	andlw	2
  3332  0287  00A8               	movwf	??_PWM_DutyCycle
  3333  0288  0EA8               	swapf	??_PWM_DutyCycle,f
  3334  0289  0DA8               	rlf	??_PWM_DutyCycle,f
  3335  028A  0817               	movf	23,w	;volatile
  3336  028B  0628               	xorwf	??_PWM_DutyCycle,w
  3337  028C  39DF               	andlw	-33
  3338  028D  0628               	xorwf	??_PWM_DutyCycle,w
  3339  028E  0097               	movwf	23	;volatile
  3340                           
  3341                           ;VXL_main.c: 55: CCP1CONbits.CCP1Y = PWM_duty & 1;
  3342  028F  0862               	movf	_PWM_duty,w
  3343  0290  3901               	andlw	1
  3344  0291  00A8               	movwf	??_PWM_DutyCycle
  3345  0292  0EA8               	swapf	??_PWM_DutyCycle,f
  3346  0293  0817               	movf	23,w	;volatile
  3347  0294  0628               	xorwf	??_PWM_DutyCycle,w
  3348  0295  39EF               	andlw	-17
  3349  0296  0628               	xorwf	??_PWM_DutyCycle,w
  3350  0297  0097               	movwf	23	;volatile
  3351                           
  3352                           ;VXL_main.c: 56: CCPR1L = PWM_duty >> 2;
  3353  0298  0863               	movf	_PWM_duty+1,w
  3354  0299  00A9               	movwf	??_PWM_DutyCycle+1
  3355  029A  0862               	movf	_PWM_duty,w
  3356  029B  00A8               	movwf	??_PWM_DutyCycle
  3357  029C  1003               	clrc
  3358  029D  0CA9               	rrf	??_PWM_DutyCycle+1,f
  3359  029E  0CA8               	rrf	??_PWM_DutyCycle,f
  3360  029F  1003               	clrc
  3361  02A0  0CA9               	rrf	??_PWM_DutyCycle+1,f
  3362  02A1  0CA8               	rrf	??_PWM_DutyCycle,f
  3363  02A2  0828               	movf	??_PWM_DutyCycle,w
  3364  02A3  0095               	movwf	21	;volatile
  3365  02A4  0008               	return
  3366  02A5                     __end_of_PWM_DutyCycle:	
  3367                           
  3368                           	psect	text16
  3369  0005                     __ptext16:	
  3370 ;; *************** function ___wmul *****************
  3371 ;; Defined at:
  3372 ;;		line 15 in file "D:\HardwareDesign\Microchip\xc8\v1.45\sources\common\Umul16.c"
  3373 ;; Parameters:    Size  Location     Type
  3374 ;;  multiplier      2    0[COMMON] unsigned int 
  3375 ;;  multiplicand    2    2[COMMON] unsigned int 
  3376 ;; Auto vars:     Size  Location     Type
  3377 ;;  product         2    4[COMMON] unsigned int 
  3378 ;; Return value:  Size  Location     Type
  3379 ;;                  2    0[COMMON] unsigned int 
  3380 ;; Registers used:
  3381 ;;		wreg, status,2, status,0
  3382 ;; Tracked objects:
  3383 ;;		On entry : 0/0
  3384 ;;		On exit  : 0/0
  3385 ;;		Unchanged: 0/0
  3386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3387 ;;      Params:         4       0       0       0       0
  3388 ;;      Locals:         2       0       0       0       0
  3389 ;;      Temps:          0       0       0       0       0
  3390 ;;      Totals:         6       0       0       0       0
  3391 ;;Total ram usage:        6 bytes
  3392 ;; Hardware stack levels used:    1
  3393 ;; This function calls:
  3394 ;;		Nothing
  3395 ;; This function is called by:
  3396 ;;		_PWM_DutyCycle
  3397 ;; This function uses a non-reentrant model
  3398 ;;
  3399                           
  3400                           
  3401                           ;psect for function ___wmul
  3402  0005                     ___wmul:	
  3403                           
  3404                           ;incstack = 0
  3405                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3406  0005  01F4               	clrf	___wmul@product
  3407  0006  01F5               	clrf	___wmul@product+1
  3408  0007                     l1222:	
  3409  0007  1C70               	btfss	___wmul@multiplier,0
  3410  0008  280F               	goto	l232
  3411  0009  0872               	movf	___wmul@multiplicand,w
  3412  000A  07F4               	addwf	___wmul@product,f
  3413  000B  1803               	skipnc
  3414  000C  0AF5               	incf	___wmul@product+1,f
  3415  000D  0873               	movf	___wmul@multiplicand+1,w
  3416  000E  07F5               	addwf	___wmul@product+1,f
  3417  000F                     l232:	
  3418  000F  3001               	movlw	1
  3419  0010                     u1195:	
  3420  0010  1003               	clrc
  3421  0011  0DF2               	rlf	___wmul@multiplicand,f
  3422  0012  0DF3               	rlf	___wmul@multiplicand+1,f
  3423  0013  3EFF               	addlw	-1
  3424  0014  1D03               	skipz
  3425  0015  2810               	goto	u1195
  3426  0016  3001               	movlw	1
  3427  0017                     u1205:	
  3428  0017  1003               	clrc
  3429  0018  0CF1               	rrf	___wmul@multiplier+1,f
  3430  0019  0CF0               	rrf	___wmul@multiplier,f
  3431  001A  3EFF               	addlw	-1
  3432  001B  1D03               	skipz
  3433  001C  2817               	goto	u1205
  3434  001D  0870               	movf	___wmul@multiplier,w
  3435  001E  0471               	iorwf	___wmul@multiplier+1,w
  3436  001F  1D03               	btfss	3,2
  3437  0020  2807               	goto	l1222
  3438  0021  0875               	movf	___wmul@product+1,w
  3439  0022  00F1               	movwf	?___wmul+1
  3440  0023  0874               	movf	___wmul@product,w
  3441  0024  00F0               	movwf	?___wmul
  3442  0025  0008               	return
  3443  0026                     __end_of___wmul:	
  3444                           
  3445                           	psect	text17
  3446  0079                     __ptext17:	
  3447 ;; *************** function ___lwdiv *****************
  3448 ;; Defined at:
  3449 ;;		line 6 in file "D:\HardwareDesign\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  3450 ;; Parameters:    Size  Location     Type
  3451 ;;  divisor         2    6[COMMON] unsigned int 
  3452 ;;  dividend        2    8[COMMON] unsigned int 
  3453 ;; Auto vars:     Size  Location     Type
  3454 ;;  quotient        2   11[COMMON] unsigned int 
  3455 ;;  counter         1   13[COMMON] unsigned char 
  3456 ;; Return value:  Size  Location     Type
  3457 ;;                  2    6[COMMON] unsigned int 
  3458 ;; Registers used:
  3459 ;;		wreg, status,2, status,0
  3460 ;; Tracked objects:
  3461 ;;		On entry : 0/0
  3462 ;;		On exit  : 0/0
  3463 ;;		Unchanged: 0/0
  3464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3465 ;;      Params:         4       0       0       0       0
  3466 ;;      Locals:         3       0       0       0       0
  3467 ;;      Temps:          1       0       0       0       0
  3468 ;;      Totals:         8       0       0       0       0
  3469 ;;Total ram usage:        8 bytes
  3470 ;; Hardware stack levels used:    1
  3471 ;; This function calls:
  3472 ;;		Nothing
  3473 ;; This function is called by:
  3474 ;;		_PWM_DutyCycle
  3475 ;; This function uses a non-reentrant model
  3476 ;;
  3477                           
  3478                           
  3479                           ;psect for function ___lwdiv
  3480  0079                     ___lwdiv:	
  3481                           
  3482                           ;incstack = 0
  3483                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3484  0079  01FB               	clrf	___lwdiv@quotient
  3485  007A  01FC               	clrf	___lwdiv@quotient+1
  3486  007B  0876               	movf	___lwdiv@divisor,w
  3487  007C  0477               	iorwf	___lwdiv@divisor+1,w
  3488  007D  1903               	btfsc	3,2
  3489  007E  28B0               	goto	l1516
  3490  007F  01FD               	clrf	___lwdiv@counter
  3491  0080  0AFD               	incf	___lwdiv@counter,f
  3492  0081                     l1504:	
  3493  0081  1BF7               	btfsc	___lwdiv@divisor+1,7
  3494  0082  288F               	goto	l1506
  3495  0083  3001               	movlw	1
  3496  0084                     u1845:	
  3497  0084  1003               	clrc
  3498  0085  0DF6               	rlf	___lwdiv@divisor,f
  3499  0086  0DF7               	rlf	___lwdiv@divisor+1,f
  3500  0087  3EFF               	addlw	-1
  3501  0088  1D03               	skipz
  3502  0089  2884               	goto	u1845
  3503  008A  3001               	movlw	1
  3504  008B  00FA               	movwf	??___lwdiv
  3505  008C  087A               	movf	??___lwdiv,w
  3506  008D  07FD               	addwf	___lwdiv@counter,f
  3507  008E  2881               	goto	l1504
  3508  008F                     l1506:	
  3509  008F  3001               	movlw	1
  3510  0090                     u1865:	
  3511  0090  1003               	clrc
  3512  0091  0DFB               	rlf	___lwdiv@quotient,f
  3513  0092  0DFC               	rlf	___lwdiv@quotient+1,f
  3514  0093  3EFF               	addlw	-1
  3515  0094  1D03               	skipz
  3516  0095  2890               	goto	u1865
  3517  0096  0877               	movf	___lwdiv@divisor+1,w
  3518  0097  0279               	subwf	___lwdiv@dividend+1,w
  3519  0098  1D03               	skipz
  3520  0099  289C               	goto	u1875
  3521  009A  0876               	movf	___lwdiv@divisor,w
  3522  009B  0278               	subwf	___lwdiv@dividend,w
  3523  009C                     u1875:	
  3524  009C  1C03               	skipc
  3525  009D  28A5               	goto	l1512
  3526  009E  0876               	movf	___lwdiv@divisor,w
  3527  009F  02F8               	subwf	___lwdiv@dividend,f
  3528  00A0  0877               	movf	___lwdiv@divisor+1,w
  3529  00A1  1C03               	skipc
  3530  00A2  03F9               	decf	___lwdiv@dividend+1,f
  3531  00A3  02F9               	subwf	___lwdiv@dividend+1,f
  3532  00A4  147B               	bsf	___lwdiv@quotient,0
  3533  00A5                     l1512:	
  3534  00A5  3001               	movlw	1
  3535  00A6                     u1885:	
  3536  00A6  1003               	clrc
  3537  00A7  0CF7               	rrf	___lwdiv@divisor+1,f
  3538  00A8  0CF6               	rrf	___lwdiv@divisor,f
  3539  00A9  3EFF               	addlw	-1
  3540  00AA  1D03               	skipz
  3541  00AB  28A6               	goto	u1885
  3542  00AC  3001               	movlw	1
  3543  00AD  02FD               	subwf	___lwdiv@counter,f
  3544  00AE  1D03               	btfss	3,2
  3545  00AF  288F               	goto	l1506
  3546  00B0                     l1516:	
  3547  00B0  087C               	movf	___lwdiv@quotient+1,w
  3548  00B1  00F7               	movwf	?___lwdiv+1
  3549  00B2  087B               	movf	___lwdiv@quotient,w
  3550  00B3  00F6               	movwf	?___lwdiv
  3551  00B4  0008               	return
  3552  00B5                     __end_of___lwdiv:	
  3553                           
  3554                           	psect	text18
  3555  0333                     __ptext18:	
  3556 ;; *************** function ___aldiv *****************
  3557 ;; Defined at:
  3558 ;;		line 6 in file "D:\HardwareDesign\Microchip\xc8\v1.45\sources\common\aldiv.c"
  3559 ;; Parameters:    Size  Location     Type
  3560 ;;  divisor         4    0[COMMON] long 
  3561 ;;  dividend        4    4[COMMON] long 
  3562 ;; Auto vars:     Size  Location     Type
  3563 ;;  quotient        4    2[BANK0 ] long 
  3564 ;;  sign            1    1[BANK0 ] unsigned char 
  3565 ;;  counter         1    0[BANK0 ] unsigned char 
  3566 ;; Return value:  Size  Location     Type
  3567 ;;                  4    0[COMMON] long 
  3568 ;; Registers used:
  3569 ;;		wreg, status,2, status,0
  3570 ;; Tracked objects:
  3571 ;;		On entry : 0/0
  3572 ;;		On exit  : 0/0
  3573 ;;		Unchanged: 0/0
  3574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3575 ;;      Params:         8       0       0       0       0
  3576 ;;      Locals:         0       6       0       0       0
  3577 ;;      Temps:          1       0       0       0       0
  3578 ;;      Totals:         9       6       0       0       0
  3579 ;;Total ram usage:       15 bytes
  3580 ;; Hardware stack levels used:    1
  3581 ;; This function calls:
  3582 ;;		Nothing
  3583 ;; This function is called by:
  3584 ;;		_PWM_DutyCycle
  3585 ;;		_UARTinit
  3586 ;; This function uses a non-reentrant model
  3587 ;;
  3588                           
  3589                           
  3590                           ;psect for function ___aldiv
  3591  0333                     ___aldiv:	
  3592                           
  3593                           ;incstack = 0
  3594                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  3595  0333  1283               	bcf	3,5	;RP0=0, select bank0
  3596  0334  1303               	bcf	3,6	;RP1=0, select bank0
  3597  0335  01A1               	clrf	___aldiv@sign
  3598  0336  1FF3               	btfss	___aldiv@divisor+3,7
  3599  0337  2B45               	goto	l287
  3600  0338  09F0               	comf	___aldiv@divisor,f
  3601  0339  09F1               	comf	___aldiv@divisor+1,f
  3602  033A  09F2               	comf	___aldiv@divisor+2,f
  3603  033B  09F3               	comf	___aldiv@divisor+3,f
  3604  033C  0AF0               	incf	___aldiv@divisor,f
  3605  033D  1903               	skipnz
  3606  033E  0AF1               	incf	___aldiv@divisor+1,f
  3607  033F  1903               	skipnz
  3608  0340  0AF2               	incf	___aldiv@divisor+2,f
  3609  0341  1903               	skipnz
  3610  0342  0AF3               	incf	___aldiv@divisor+3,f
  3611  0343  01A1               	clrf	___aldiv@sign
  3612  0344  0AA1               	incf	___aldiv@sign,f
  3613  0345                     l287:	
  3614  0345  1FF7               	btfss	___aldiv@dividend+3,7
  3615  0346  2B56               	goto	l1244
  3616  0347  09F4               	comf	___aldiv@dividend,f
  3617  0348  09F5               	comf	___aldiv@dividend+1,f
  3618  0349  09F6               	comf	___aldiv@dividend+2,f
  3619  034A  09F7               	comf	___aldiv@dividend+3,f
  3620  034B  0AF4               	incf	___aldiv@dividend,f
  3621  034C  1903               	skipnz
  3622  034D  0AF5               	incf	___aldiv@dividend+1,f
  3623  034E  1903               	skipnz
  3624  034F  0AF6               	incf	___aldiv@dividend+2,f
  3625  0350  1903               	skipnz
  3626  0351  0AF7               	incf	___aldiv@dividend+3,f
  3627  0352  3001               	movlw	1
  3628  0353  00F8               	movwf	??___aldiv
  3629  0354  0878               	movf	??___aldiv,w
  3630  0355  06A1               	xorwf	___aldiv@sign,f
  3631  0356                     l1244:	
  3632  0356  3000               	movlw	0
  3633  0357  00A5               	movwf	___aldiv@quotient+3
  3634  0358  3000               	movlw	0
  3635  0359  00A4               	movwf	___aldiv@quotient+2
  3636  035A  3000               	movlw	0
  3637  035B  00A3               	movwf	___aldiv@quotient+1
  3638  035C  3000               	movlw	0
  3639  035D  00A2               	movwf	___aldiv@quotient
  3640  035E  0873               	movf	___aldiv@divisor+3,w
  3641  035F  0472               	iorwf	___aldiv@divisor+2,w
  3642  0360  0471               	iorwf	___aldiv@divisor+1,w
  3643  0361  0470               	iorwf	___aldiv@divisor,w
  3644  0362  1903               	skipnz
  3645  0363  2BAB               	goto	l1266
  3646  0364  01A0               	clrf	___aldiv@counter
  3647  0365  0AA0               	incf	___aldiv@counter,f
  3648  0366                     l1252:	
  3649  0366  1BF3               	btfsc	___aldiv@divisor+3,7
  3650  0367  2B76               	goto	l1254
  3651  0368  3001               	movlw	1
  3652  0369  00F8               	movwf	??___aldiv
  3653  036A                     u1255:	
  3654  036A  1003               	clrc
  3655  036B  0DF0               	rlf	___aldiv@divisor,f
  3656  036C  0DF1               	rlf	___aldiv@divisor+1,f
  3657  036D  0DF2               	rlf	___aldiv@divisor+2,f
  3658  036E  0DF3               	rlf	___aldiv@divisor+3,f
  3659  036F  0BF8               	decfsz	??___aldiv,f
  3660  0370  2B6A               	goto	u1255
  3661  0371  3001               	movlw	1
  3662  0372  00F8               	movwf	??___aldiv
  3663  0373  0878               	movf	??___aldiv,w
  3664  0374  07A0               	addwf	___aldiv@counter,f
  3665  0375  2B66               	goto	l1252
  3666  0376                     l1254:	
  3667  0376  3001               	movlw	1
  3668  0377  00F8               	movwf	??___aldiv
  3669  0378                     u1275:	
  3670  0378  1003               	clrc
  3671  0379  0DA2               	rlf	___aldiv@quotient,f
  3672  037A  0DA3               	rlf	___aldiv@quotient+1,f
  3673  037B  0DA4               	rlf	___aldiv@quotient+2,f
  3674  037C  0DA5               	rlf	___aldiv@quotient+3,f
  3675  037D  0BF8               	decfsz	??___aldiv,f
  3676  037E  2B78               	goto	u1275
  3677  037F  0873               	movf	___aldiv@divisor+3,w
  3678  0380  0277               	subwf	___aldiv@dividend+3,w
  3679  0381  1D03               	skipz
  3680  0382  2B8D               	goto	u1285
  3681  0383  0872               	movf	___aldiv@divisor+2,w
  3682  0384  0276               	subwf	___aldiv@dividend+2,w
  3683  0385  1D03               	skipz
  3684  0386  2B8D               	goto	u1285
  3685  0387  0871               	movf	___aldiv@divisor+1,w
  3686  0388  0275               	subwf	___aldiv@dividend+1,w
  3687  0389  1D03               	skipz
  3688  038A  2B8D               	goto	u1285
  3689  038B  0870               	movf	___aldiv@divisor,w
  3690  038C  0274               	subwf	___aldiv@dividend,w
  3691  038D                     u1285:	
  3692  038D  1C03               	skipc
  3693  038E  2B9E               	goto	l1262
  3694  038F  0870               	movf	___aldiv@divisor,w
  3695  0390  02F4               	subwf	___aldiv@dividend,f
  3696  0391  0871               	movf	___aldiv@divisor+1,w
  3697  0392  1C03               	skipc
  3698  0393  0F71               	incfsz	___aldiv@divisor+1,w
  3699  0394  02F5               	subwf	___aldiv@dividend+1,f
  3700  0395  0872               	movf	___aldiv@divisor+2,w
  3701  0396  1C03               	skipc
  3702  0397  0F72               	incfsz	___aldiv@divisor+2,w
  3703  0398  02F6               	subwf	___aldiv@dividend+2,f
  3704  0399  0873               	movf	___aldiv@divisor+3,w
  3705  039A  1C03               	skipc
  3706  039B  0F73               	incfsz	___aldiv@divisor+3,w
  3707  039C  02F7               	subwf	___aldiv@dividend+3,f
  3708  039D  1422               	bsf	___aldiv@quotient,0
  3709  039E                     l1262:	
  3710  039E  3001               	movlw	1
  3711  039F                     u1295:	
  3712  039F  1003               	clrc
  3713  03A0  0CF3               	rrf	___aldiv@divisor+3,f
  3714  03A1  0CF2               	rrf	___aldiv@divisor+2,f
  3715  03A2  0CF1               	rrf	___aldiv@divisor+1,f
  3716  03A3  0CF0               	rrf	___aldiv@divisor,f
  3717  03A4  3EFF               	addlw	-1
  3718  03A5  1D03               	skipz
  3719  03A6  2B9F               	goto	u1295
  3720  03A7  3001               	movlw	1
  3721  03A8  02A0               	subwf	___aldiv@counter,f
  3722  03A9  1D03               	btfss	3,2
  3723  03AA  2B76               	goto	l1254
  3724  03AB                     l1266:	
  3725  03AB  0821               	movf	___aldiv@sign,w
  3726  03AC  1903               	btfsc	3,2
  3727  03AD  2BB9               	goto	l1270
  3728  03AE  09A2               	comf	___aldiv@quotient,f
  3729  03AF  09A3               	comf	___aldiv@quotient+1,f
  3730  03B0  09A4               	comf	___aldiv@quotient+2,f
  3731  03B1  09A5               	comf	___aldiv@quotient+3,f
  3732  03B2  0AA2               	incf	___aldiv@quotient,f
  3733  03B3  1903               	skipnz
  3734  03B4  0AA3               	incf	___aldiv@quotient+1,f
  3735  03B5  1903               	skipnz
  3736  03B6  0AA4               	incf	___aldiv@quotient+2,f
  3737  03B7  1903               	skipnz
  3738  03B8  0AA5               	incf	___aldiv@quotient+3,f
  3739  03B9                     l1270:	
  3740  03B9  0825               	movf	___aldiv@quotient+3,w
  3741  03BA  00F3               	movwf	?___aldiv+3
  3742  03BB  0824               	movf	___aldiv@quotient+2,w
  3743  03BC  00F2               	movwf	?___aldiv+2
  3744  03BD  0823               	movf	___aldiv@quotient+1,w
  3745  03BE  00F1               	movwf	?___aldiv+1
  3746  03BF  0822               	movf	___aldiv@quotient,w
  3747  03C0  00F0               	movwf	?___aldiv
  3748  03C1  0008               	return
  3749  03C2                     __end_of___aldiv:	
  3750                           
  3751                           	psect	text19
  3752  0FE3                     __ptext19:	
  3753 ;; *************** function _ADCinit *****************
  3754 ;; Defined at:
  3755 ;;		line 59 in file "VXL_main.c"
  3756 ;; Parameters:    Size  Location     Type
  3757 ;;		None
  3758 ;; Auto vars:     Size  Location     Type
  3759 ;;		None
  3760 ;; Return value:  Size  Location     Type
  3761 ;;                  1    wreg      void 
  3762 ;; Registers used:
  3763 ;;		wreg, status,2
  3764 ;; Tracked objects:
  3765 ;;		On entry : 0/0
  3766 ;;		On exit  : 0/0
  3767 ;;		Unchanged: 0/0
  3768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3769 ;;      Params:         0       0       0       0       0
  3770 ;;      Locals:         0       0       0       0       0
  3771 ;;      Temps:          0       0       0       0       0
  3772 ;;      Totals:         0       0       0       0       0
  3773 ;;Total ram usage:        0 bytes
  3774 ;; Hardware stack levels used:    1
  3775 ;; This function calls:
  3776 ;;		Nothing
  3777 ;; This function is called by:
  3778 ;;		_main
  3779 ;; This function uses a non-reentrant model
  3780 ;;
  3781                           
  3782                           
  3783                           ;psect for function _ADCinit
  3784  0FE3                     _ADCinit:	
  3785                           
  3786                           ;VXL_main.c: 61: TRISA = 0xFF;
  3787                           
  3788                           ;incstack = 0
  3789                           ; Regs used in _ADCinit: [wreg+status,2]
  3790  0FE3  30FF               	movlw	255
  3791  0FE4  1683               	bsf	3,5	;RP0=1, select bank1
  3792  0FE5  1303               	bcf	3,6	;RP1=0, select bank1
  3793  0FE6  0085               	movwf	5	;volatile
  3794                           
  3795                           ;VXL_main.c: 63: TRISB = 0x00;
  3796  0FE7  0186               	clrf	6	;volatile
  3797                           
  3798                           ;VXL_main.c: 65: ADCON0bits.ADCS0 = 0;
  3799  0FE8  1283               	bcf	3,5	;RP0=0, select bank0
  3800  0FE9  1303               	bcf	3,6	;RP1=0, select bank0
  3801  0FEA  131F               	bcf	31,6	;volatile
  3802                           
  3803                           ;VXL_main.c: 66: ADCON0bits.ADCS1 = 1;
  3804  0FEB  179F               	bsf	31,7	;volatile
  3805                           
  3806                           ;VXL_main.c: 67: ADCON1bits.ADCS2 = 1;
  3807  0FEC  1683               	bsf	3,5	;RP0=1, select bank1
  3808  0FED  1303               	bcf	3,6	;RP1=0, select bank1
  3809  0FEE  171F               	bsf	31,6	;volatile
  3810                           
  3811                           ;VXL_main.c: 69: ADCON0bits.CHS2 = 0;
  3812  0FEF  1283               	bcf	3,5	;RP0=0, select bank0
  3813  0FF0  1303               	bcf	3,6	;RP1=0, select bank0
  3814  0FF1  129F               	bcf	31,5	;volatile
  3815                           
  3816                           ;VXL_main.c: 70: ADCON0bits.CHS1 = 0;
  3817  0FF2  121F               	bcf	31,4	;volatile
  3818                           
  3819                           ;VXL_main.c: 71: ADCON0bits.CHS0 = 0;
  3820  0FF3  119F               	bcf	31,3	;volatile
  3821                           
  3822                           ;VXL_main.c: 73: ADCON1bits.ADFM = 1;
  3823  0FF4  1683               	bsf	3,5	;RP0=1, select bank1
  3824  0FF5  1303               	bcf	3,6	;RP1=0, select bank1
  3825  0FF6  179F               	bsf	31,7	;volatile
  3826                           
  3827                           ;VXL_main.c: 75: ADCON1bits.PCFG0 = 0;
  3828  0FF7  101F               	bcf	31,0	;volatile
  3829                           
  3830                           ;VXL_main.c: 76: ADCON1bits.PCFG1 = 0;
  3831  0FF8  109F               	bcf	31,1	;volatile
  3832                           
  3833                           ;VXL_main.c: 77: ADCON1bits.PCFG2 = 0;
  3834  0FF9  111F               	bcf	31,2	;volatile
  3835                           
  3836                           ;VXL_main.c: 78: ADCON1bits.PCFG3 = 0;
  3837  0FFA  119F               	bcf	31,3	;volatile
  3838                           
  3839                           ;VXL_main.c: 80: ADCON0bits.GO_DONE = 1;
  3840  0FFB  1283               	bcf	3,5	;RP0=0, select bank0
  3841  0FFC  1303               	bcf	3,6	;RP1=0, select bank0
  3842  0FFD  151F               	bsf	31,2	;volatile
  3843                           
  3844                           ;VXL_main.c: 81: ADCON0bits.ADON = 1;
  3845  0FFE  141F               	bsf	31,0	;volatile
  3846  0FFF  0008               	return
  3847  1000                     __end_of_ADCinit:	
  3848  007E                     btemp	set	126	;btemp
  3849  007E                     wtemp0	set	126


Data Sizes:
    Strings     20
    Constant    0
    Data        0
    BSS         8
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     66      74
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    UART_Write_Text@a	PTR unsigned char  size(1) Largest target is 11
		 -> STR_2(CODE[9]), STR_1(CODE[11]), 


Critical Paths under _main in COMMON

    _hienthiled->___lbtoft
    ___lbtoft->___ftpack
    ___fttol->___lbtoft
    ___ftmul->___lbtoft
    ___ftdiv->___lbtoft
    _UARTinit->___aldiv
    _UART_Write_number->_UART_Write
    _UART_Write_Text->_UART_Write
    _PWM_DutyCycle->___lwdiv
    ___lwdiv->___wmul

Critical Paths under _main in BANK0

    _main->_hienthiled
    _hienthiled->___fttol
    ___fttol->___ftdiv
    ___ftmul->___lbtoft
    ___ftdiv->___ftmul
    _UARTinit->___aldiv
    _PWM_DutyCycle->___aldiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0   12801
                                             60 BANK0      6     6      0
                            _ADCinit
                      _PWM_DutyCycle
                      _PWM_Initalize
                         _UART_Write
                    _UART_Write_Text
                  _UART_Write_number
                           _UARTinit
                            ___awdiv
                            ___awmod
                         _hienthiled
                       _hienthitocdo
 ---------------------------------------------------------------------------------
 (1) _hienthitocdo                                         2     0      2     278
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _hienthiled                                          10    10      0    8540
                                             50 BANK0     10    10      0
                            ___awdiv
                            ___awmod
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (2) ___lbtoft                                             8     5      3    2053
                                              8 COMMON     4     1      3
                                              0 BANK0      4     4      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     316
                                             36 BANK0     14    10      4
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6    2485
                                              4 BANK0     16    10      6
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    2439
                                             20 BANK0     16    10      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2031
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4     552
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     556
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (1) _UARTinit                                            18    14      4     904
                                              9 COMMON     2     2      0
                                              6 BANK0     16    12      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (1) _UART_Write_number                                    2     0      2     236
                                              1 COMMON     2     0      2
                         _UART_Write
 ---------------------------------------------------------------------------------
 (1) _UART_Write_Text                                      3     3      0     172
                                              1 COMMON     3     3      0
                         _UART_Write
 ---------------------------------------------------------------------------------
 (2) _UART_Write                                           1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _PWM_Initalize                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM_DutyCycle                                        4     2      2    1472
                                              6 BANK0      4     2      2
                            ___aldiv
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     220
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     290
                                              6 COMMON     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     684
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _ADCinit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCinit
   _PWM_DutyCycle
     ___aldiv
     ___lwdiv
       ___wmul (ARG)
     ___wmul
   _PWM_Initalize
   _UART_Write
   _UART_Write_Text
     _UART_Write
   _UART_Write_number
     _UART_Write
   _UARTinit
     ___aldiv
   ___awdiv
   ___awmod
   _hienthiled
     ___awdiv
     ___awmod
     ___ftdiv
       ___ftmul (ARG)
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
     ___ftmul
       ___ftpack
       ___lbtoft (ARG)
         ___ftpack
     ___fttol
       ___ftdiv (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___lbtoft (ARG)
         ___ftpack
     ___lbtoft
       ___ftpack
   _hienthitocdo

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      58       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     42      4A       5       92.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      58      12        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Apr 18 16:52:56 2018

    __size_of_PWM_Initalize 0015      __size_of_PWM_DutyCycle 0087                           pc 0002  
               __CFG_CP$OFF 0000                          l91 0050                          l92 0057  
                        l93 005E                          l94 0078                          l89 0049  
              ___awdiv@sign 0076                          fsr 0004         ___wmul@multiplicand 0072  
                       l108 0FA9                         l132 0158                         l232 000F  
                       l400 01FD                         l401 0205                         l137 06ED  
                       l287 0345                         l393 01E8                         l484 0319  
                       _PR2 0092                __CFG_CPD$OFF 0000                         fsr0 0004  
              ___awmod@sign 0076  __size_of_UART_Write_number 0059                __CFG_FOSC$HS 0000  
                _PWM_period 0064             __end_of_ADCinit 1000                __CFG_LVP$OFF 0000  
              ___ftdiv@cntr 003E                ___ftdiv@sign 0043                        l1202 01ED  
                      l1300 0184                        l1204 01F7                        l1222 0007  
                      l1310 01A5                        l1314 01AD                        l1306 019A  
                      l1330 00C6                        l1410 054B                        l1252 0366  
                      l1244 0356                        l1340 00DA                        l1404 0535  
                      l1270 03B9                        l1262 039E                        l1254 0376  
                      l1326 00BF                        l1422 058A                        l1512 00A5  
                      l1504 0081                        l1600 06BE                        l1352 00FB  
                      l1344 00E8                        l1192 01C1                        l1266 03AB  
                      l1506 008F                        l1282 0163                        l1338 00CC  
                      l1194 01CD                        l1362 047D                        l1434 05B2  
                      l1426 059A                        l1516 00B0                        l1348 00F3  
                      l1196 01D2                        l1188 01BA                        l1622 0029  
                      l1630 010B                        l1390 04F7                        l1382 04D8  
                      l1438 05C2                        l1454 02BF                        l1640 0124  
                      l1632 0110                        l1288 016E                        l1368 0493  
                      l1480 030E                        l1472 02F1                        l1642 0129  
                      l1634 0115                        l1626 0101                        l1298 0176  
                      l1482 031C                        l1474 0301                        l1644 012E  
                      l1636 011A                        l1628 0106                        l1580 0460  
                      l1638 011F                        l1486 032A                        l1670 0718  
                      l1662 06FA                        l1648 0133                        l1752 006A  
                      l1680 0743                        l1754 0138                        l1578 0410  
                      l1586 0065                        l1690 076E                        STR_1 0806  
                      STR_2 0811                        _BRGH 04C2                        _CREN 00C4  
                      u1115 01F0                        u1205 0017                        u1155 020C  
                      u1075 01C6                        u2035 0705                        u2045 0723  
                      u1255 036A                        u1095 01E1                        u2055 0730  
                      u2065 074E                        u1275 0378                        u1195 0010  
                      u1355 0179                        u2075 075B                        u1285 038D  
                      u2085 0790                        u1295 039F                        u1375 0185  
                      u1455 00CF                        u1535 04A5                        u1615 0557  
                      u1385 0191                        u1545 04B7                        u1705 05C3  
                      u1625 0569                        u1395 019B                        u1475 00E0  
                      u1555 04D9                        u1715 05CB                        u1485 00E9  
                      u1565 04EA                        u1805 0310                        u1575 04F8  
                      u1655 059B                        u1665 05A3                        u1745 02C6  
                      u1905 0420                        u1914 0440                        u1915 043D  
                      u1845 0084                        u1925 0419                        u1950 0636  
                      u1951 0637                        u1935 05FB                        u1775 02F2  
                      u1952 063C                        u1865 0090                        u1953 063D  
                      u1945 061C                        u1875 009C                        u1885 00A6  
                      u1990 069F                        u1991 06A0                        u1975 0664  
                      u1992 06A5                        u1993 06A6                        u1985 0685  
                      _RCIF 0065                        _SPEN 00C7                        _TRMT 04C1  
                      _TXEN 04C5                        _SYNC 04C4                __CFG_WRT$OFF 0000  
             ?_hienthitocdo 0070                        _main 06D4                ___ftpack@arg 0070  
              ___ftpack@exp 0073                        _temp 0066                        btemp 007E  
                      start 0000                ___ftmul@cntr 0032                ___ftmul@sign 0033  
   __end_of_UART_Write_Text 0048                ___fttol@exp1 0051                ___fttol@lval 004D  
           __end_of___aldiv 03C2                       ?_main 0070             __end_of___awdiv 01B2  
             __CFG_WDTE$OFF 0000             __end_of___awmod 0100             __end_of___ftdiv 051D  
           __end_of___ftmul 05F0             ___awdiv@divisor 0070             __end_of___fttol 0333  
           __end_of___lwdiv 00B5             ___awdiv@counter 0075                       _SPBRG 0099  
                     _PORTB 0006                       _TRISA 0085                       _TRISB 0086  
                     _TXREG 0019                 ?_UART_Write 0070               _PWM_Initalize 0FB2  
             _PWM_DutyCycle 021E            __end_of_UARTinit 06D4               ___ftpack@sign 0074  
                     _tocdo 0068              __CFG_BOREN$OFF 0000                       pclath 000A  
            ??_hienthitocdo 0072                       status 0003                       wtemp0 007E  
           __initialization 07F2                __end_of_main 07F2                   ??_ADCinit 0070  
                    ??_main 007E               ___fttol@sign1 004C              ?_PWM_Initalize 0070  
            ?_PWM_DutyCycle 0026            UARTinit@baudrate 0026                      _ADRESL 009E  
                    _CCPR1L 0015            ___awdiv@dividend 0072            __end_of___ftpack 021E  
          __end_of___lbtoft 0FE3                      _TRISC2 043A                      _TRISD0 0440  
                    _TRISD1 0441                      _TRISD2 0442                      _TRISD3 0443  
                    _TRISD4 0444                      _TRISC6 043E                      _TRISD5 0445  
                    _TRISC7 043F                      _TRISD6 0446                      _TRISD7 0447  
            __CFG_PWRTE$OFF 0000         __size_of_UART_Write 000A                   ??___aldiv 0078  
                    ___wmul 0005                   ??___awdiv 0074                   ??___awmod 0074  
          ?_UART_Write_Text 0070                   ??___ftdiv 003A                   ??___ftmul 002A  
                 ??___fttol 0048                   ??___lwdiv 007A            ___awdiv@quotient 0077  
           ___awmod@divisor 0070             ___awmod@counter 0075       ___ftmul@f3_as_product 002F  
   __end_of__initialization 07FC                  ___ftdiv@f1 0037                  ___ftdiv@f2 0034  
                ___ftdiv@f3 003F                  ___lbtoft@c 007B                  ___ftmul@f1 0024  
                ___ftmul@f2 0027                  ___fttol@f1 0044              __pcstackCOMMON 0070  
                 ?_UARTinit 0026        __end_of_hienthitocdo 0079             ??_PWM_Initalize 0070  
           ??_PWM_DutyCycle 0028                  __pbssBANK0 0062                  __pmaintext 06D4  
                   ?___wmul 0070             hienthiled@shift 0058                  ??_UARTinit 002A  
                 ?___ftpack 0070                   ?___lbtoft 0078                     _ADCinit 0FE3  
             hienthitocdo@a 0070                ??_UART_Write 0070                   UARTinit@x 0079  
         hienthiled@nhietdo 005A                  __stringtab 0800                  _hienthiled 03C2  
                   ___aldiv 0333                     ___awdiv 0159                     ___awmod 00B5  
                   ___ftdiv 0465             __size_of___wmul 0021          __end_of_UART_Write 0FB2  
                   ___ftmul 051D                     ___fttol 02A5                     ___lwdiv 0079  
                ??___ftpack 0075                  ??___lbtoft 0020                     __ptext1 0048  
                   __ptext2 03C2                     __ptext3 0FC7                     __ptext4 02A5  
                   __ptext5 051D                     __ptext6 0465                     __ptext7 01B2  
                   __ptext8 00B5                     __ptext9 0159                   _T2CONbits 0012  
          ___awmod@dividend 0072            ___aldiv@dividend 0074        end_of_initialization 07FC  
          ___aldiv@quotient 0022       __size_of_hienthitocdo 0031                   _PORTDbits 0008  
            UART_Write@data 0070                 ?_hienthiled 0070                 _CCP1CONbits 0017  
               ___ftdiv@exp 0042                _hienthitocdo 0048                 ___ftmul@exp 002E  
            __end_of___wmul 0026           __size_of_UARTinit 00E4    __size_of_UART_Write_Text 0022  
       start_initialization 07F2                    ??___wmul 0074         __size_of_hienthiled 00A3  
                  ?_ADCinit 0070           __size_of___ftpack 006C           __size_of___lbtoft 001C  
                 ___latbits 0002               __pcstackBANK0 0020       __end_of_PWM_Initalize 0FC7  
     __end_of_PWM_DutyCycle 02A5           PWM_DutyCycle@duty 0026            ___lwdiv@dividend 0078  
                  ?___aldiv 0070                    ?___awdiv 0070                    ?___awmod 0070  
                  ?___ftdiv 0034                    ?___ftmul 0024                    ?___fttol 0044  
                  ?___lwdiv 0076                   __pstrings 0800            ___lwdiv@quotient 007B  
         ??_UART_Write_Text 0071             ___aldiv@divisor 0070             ___aldiv@counter 0020  
            ___wmul@product 0074                    _UARTinit 05F0                  _ADCON0bits 001F  
               __stringbase 0805                  _ADCON1bits 009F           ___wmul@multiplier 0070  
          __size_of_ADCinit 001D                    _PWM_duty 0062                   main@donvi 0060  
                 main@temp1 005C                ??_hienthiled 0052            __size_of___aldiv 008F  
          __size_of___awdiv 0059            __size_of___awmod 004B            __size_of___ftdiv 00B8  
          __size_of___ftmul 00D3            __size_of___fttol 008E            __size_of___lwdiv 003C  
                  ___ftpack 01B2                    ___lbtoft 0FC7          __end_of__stringtab 0806  
        __end_of_hienthiled 0465        hienthiled@bcdnhietdo 0056             ___lwdiv@divisor 0076  
           ___lwdiv@counter 007D                    __ptext10 05F0                    __ptext11 0100  
                  __ptext12 0026                    __ptext13 0FA8                    __ptext14 0FB2  
                  __ptext15 021E                    __ptext16 0005                    __ptext17 0079  
                  __ptext18 0333                    __ptext19 0FE3           _UART_Write_number 0100  
        ?_UART_Write_number 0071               __size_of_main 011E         ??_UART_Write_number 0073  
                  main@chuc 005E   __end_of_UART_Write_number 0159                   stringcode 0800  
           _UART_Write_Text 0026                    stringdir 0800                    stringtab 0800  
              ___aldiv@sign 0021                  _UART_Write 0FA8            UART_Write_Text@a 0073  
          UART_Write_Text@i 0071          UART_Write_number@a 0071  
